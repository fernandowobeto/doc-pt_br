<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 3f3362ebcdd1a27cf9c9c751dd5cbe8a6264d1c3 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.simdjson-decode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>simdjson_decode</refname>
  <refpurpose>Decodifica uma string JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>simdjson_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>associative</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Recebe uma string codificada em JSON e a converte em um valor PHP.
   Isso usa uma implementação mais rápida de Instrução Simultânea, Múltiplos Dados
   do que <function>json_decode</function> quando suportado pela arquitetura do computador.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter></term>
    <listitem>
     <para>
      A <type>string</type> <parameter>json</parameter> sendo decodificada.
     </para>
     <para>
      Esta função só funciona com strings codificadas em UTF-8.
     </para>
     <para>
      Esta função analisa entradas válidas que
      <function>json_decode</function> pode decodificar,
      desde que tenham menos de 4 GiB de comprimento.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>associative</parameter></term>
    <listitem>
     <para>
      Quando &true;, os objetos JSON serão retornados como
      &array;s associativos; quando &false;, os objetos JSON serão retornados como &object;s.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>depth</parameter></term>
    <listitem>
     <para>
      Profundidade máxima de aninhamento da estrutura que está sendo decodificada.
      O valor deve ser maior que <literal>0</literal>,
      e menor ou igual a <literal>2147483647</literal>.

      Os chamadores devem usar valores razoavelmente pequenos,
      porque profundidades maiores exigem mais espaço de buffer e
      aumentarão a profundidade de recursão, ao contrário da implementação atual de <function>json_decode</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o valor codificado em <parameter>json</parameter> no tipo PHP apropriado.
   Os valores <literal>true</literal>, <literal>false</literal> e
   <literal>null</literal> são retornados como &true;, &false; e &null;
   respectivamente.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se <parameter>json</parameter> for inválido, uma <classname>SimdJsonException</classname> será lançada a partir do PECL simdjson 2.1.0,
   enquanto anteriormente, uma <classname>RuntimeException</classname> era lançada.
  </para>
  <para>
   Se <parameter>depth</parameter> estiver fora do intervalo permitido,
   um <classname>SimdJsonValueError</classname> será gerado a partir do PECL simdjson 3.0.0,
   enquanto anteriormente, um erro de nível <constant>E_WARNING</constant> era gerado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos de <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3}';

var_dump(simdjson_decode($json));
var_dump(simdjson_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
array(3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
]]>
    </screen>
   </example>
   <example>
    <title>Acessando propriedades de objetos inválidas</title>
    <simpara>
     O acesso a elementos dentro de um objeto que contêm caracteres não
     permitidos pela convenção de nomenclatura do PHP (por exemplo, o hífen) pode ser
     feito encapsulando o nome do elemento entre chaves e o apóstrofo.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = simdjson_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Erros comuns usando <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// as seguintes strings são JavaScripts válidos, mas não JSONs válidos

// o nome e o valor devem estar entre aspas duplas
// aspas simples não são válidas
$bad_json = "{ 'bar': 'baz' }";
simdjson_decode($bad_json); // Lança SimdJsonException

// o nome deve estar entre aspas duplas
$bad_json = '{ bar: "baz" }';
simdjson_decode($bad_json); // Lança SimdJsonException

// vírgulas finais não são permitidas
$bad_json = '{ bar: "baz", }';
simdjson_decode($bad_json); // Lança SimdJsonException

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Erros de <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codificando alguns dados com uma profundidade máxima de 4
// (array -> array -> array -> string)
$json = json_encode(
    [
        1 => [
            'English' => [
                'One',
                'January'
            ],
            'French' => [
                'Une',
                'Janvier'
            ]
        ]
    ]
);

// Mostra os erros para diferentes profundidades.
var_dump(simdjson_decode($json, true, 4));
try {
    var_dump(simdjson_decode($json, true, 3));
} catch (SimdJsonException $e) {
     echo "Capturado: ", $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Capturado: The JSON document was too deep (too many nested objects and arrays)
]]>
    </screen>
   </example>
   <example>
    <title><function>simdjson_decode</function> de números inteiros grandes</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"número": 12345678901234567890}';

var_dump(simdjson_decode($json));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["número"]=>
  float(1.2345678901235E+19)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    A especificação JSON não é JavaScript, mas um subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    Em caso de falha na decodificação,
    uma <classname>SimdJsonException</classname> é lançada
    e <methodname>SimdJsonException::getCode</methodname> e
    <methodname>SimdJsonException::getMessage</methodname> podem ser usados
    para determinar a natureza exata do erro.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
