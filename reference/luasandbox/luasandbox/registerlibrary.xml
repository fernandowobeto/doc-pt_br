<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 990521c9ca64fe7d83016a613b850177d3a90776 Maintainer: leonardolara Status: ready -->

<refentry xml:id="luasandbox.registerlibrary" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandbox::registerLibrary</refname>
  <refpurpose>Registra um conjunto de funções PHP como uma biblioteca Lua</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>LuaSandbox::registerLibrary</methodname>
   <methodparam><type>string</type><parameter>libname</parameter></methodparam>
   <methodparam><type>array</type><parameter>functions</parameter></methodparam>
  </methodsynopsis>
  <para>
   Registra um conjunto de funções PHP como uma biblioteca Lua, para que Lua possa chamar
   o código PHP relevante.
  </para>
  <para>
   Para mais informações sobre como chamar funções Lua e os valores de retorno,
   veja <methodname>LuaSandboxFunction::call</methodname>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>libname</parameter></term>
    <listitem>
     <para>
      O nome da biblioteca. No estado Lua, a variável global deste
      nome será definida para a tabela de funções. Se a tabela já existir,
      as novas funções serão adicionadas a ela.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>functions</parameter></term>
    <listitem>
     <para>
      Um <type>array</type>, onde cada chave é um nome de função e cada valor é um
      <type>callable</type> PHP correspondente.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Registrando funções PHP para chamar a partir de Lua</title>
    <programlisting role="php">
<![CDATA[
<?php

// Cria um novo LuaSandbox
$sandbox = new LuaSandbox();

// Registra algumas funções no ambiente Lua

function frobnosticate( $v ) {
    return [ $v + 42 ];
}

$sandbox->registerLibrary( 'php', [
    'frobnosticate' => 'frobnosticate',
    'output' => function ( $string ) {
        echo "$string\n";
    },
    'error' => function () {
        throw new LuaSandboxRuntimeError( "Algo está errado" );
    }
] );

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>LuaSandbox::loadString</methodname></member>
    <member><methodname>LuaSandbox::wrapPhpFunction</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
