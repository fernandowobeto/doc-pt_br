<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: leonardolara Status: ready -->

<refentry xml:id="luasandbox.pauseusagetimer" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandbox::pauseUsageTimer</refname>
  <refpurpose>Pausa o cronômetro de uso da CPU</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>LuaSandbox::pauseUsageTimer</methodname>
   <void />
  </methodsynopsis>
  <para>
   Pausa o cronômetro de uso da CPU.
  </para>
  <para>
   Isso só tem efeito quando chamado de dentro de uma função de retorno de Lua. Quando a execução
   retorna para Lua, o cronômetro será automaticamente retomado. Se
   uma nova chamada para Lua for feita, o cronômetro será retomado pela
   duração dessa chamada.
  </para>
  <para>
   Se uma função de retorno do PHP chamar Lua novamente com o cronômetro não pausado, e então
   essa função Lua chamar o PHP novamente, a segunda chamada do PHP não será
   capaz de pausar o cronômetro. A lógica é que mesmo que a segunda chamada do PHP
   evite contar o uso da CPU em relação ao limite, a primeira
   chamada ainda conta.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um <type>bool</type> indicando se o cronômetro está pausado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Manipulando o cronômetro de uso</title>
    <programlisting role="php">
<![CDATA[
<?php

// Cria um novo LuaSandbox e define um limite de CPU
$sandbox = new LuaSandbox();
$sandbox->setCPULimit( 1 );

function doWait( $t ) {
    $end = microtime( true ) + $t;
    while ( microtime( true ) < $end ) {
        // gasta ciclos da CPU
    }
}

// Registra uma função de retorno do PHP
$sandbox->registerLibrary( 'php', [
    'test' => function () use ( $sandbox ) {
        $sandbox->pauseUsageTimer();
        doWait( 5 );

        $sandbox->unpauseUsageTimer();
        doWait( 0.1 );
    },
    'test2' => function () use ( $sandbox ) {
        $sandbox->pauseUsageTimer();
        $sandbox->unpauseUsageTimer();
        doWait( 1.1 );
    }
] );

echo "Isso não deve expirar...\n";
$sandbox->loadString( 'php.test()' )->call();

echo "Isso deve expirar.\n";
try {
    $sandbox->loadString( 'php.test2()' )->call();
    echo "Não expirou?\n";
} catch ( LuaSandboxTimeoutError $ex ) {
    echo "Foi o que aconteceu! " . $ex->getMessage() . "\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Isso não deve expirar...
Isso deve expirar.
Foi o que aconteceu! The maximum execution time for this script was exceeded
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>LuaSandbox::setCPULimit</methodname></member>
    <member><methodname>LuaSandbox::unpauseUsageTimer</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
