<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: leonardolara Status: ready -->

<refentry xml:id="luasandboxfunction.call" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandboxFunction::call</refname>
  <refpurpose>Chama uma função Lua</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>array</type><type>bool</type></type><methodname>LuaSandboxFunction::call</methodname>
   <methodparam rep="repeat"><type>string</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   Chama uma função Lua.
  </para>
  <para>
   Erros considerados como falha do código PHP resultarão na função
   retornando &false; e <constant>E_WARNING</constant>
   sendo emitido, por exemplo, um tipo <type>resource</type> sendo usado como um
   argumento. Erros Lua resultarão em uma exceção <classname>LuaSandboxRuntimeError</classname>
   sendo lançada.
  </para>
  <para>
   Os tipos PHP e Lua são convertidos da seguinte forma:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>O &null; do PHP é <literal>nil</literal> no Lua, e vice-versa.</para>
    </listitem>
    <listitem>
     <para>
      <type>int</type> e <type>float</type> no PHP são convertidos para números
      Lua. Infinito e <constant>NAN</constant> são suportados.
     </para>
    </listitem>
    <listitem>
     <para>
      Números Lua sem uma parte fracionária entre aproximadamente <literal>-2**53</literal>
      e <literal>2**53</literal> são convertidos para <type>int</type>s do PHP, com outros
      sendo convertidos para <type>float</type>s do PHP.
     </para>
    </listitem>
    <listitem>
     <para><type>bool</type>s do PHP são booleanos do Lua, e vice-versa.</para>
    </listitem>
    <listitem>
     <para><type>string</type>s do PHP são strings do Lua, e vice-versa.</para>
    </listitem>
    <listitem>
     <para>
      Funções do Lua são objetos <classname>LuaSandboxFunction</classname> do PHP, e vice-versa.
      Tipos <type>callable</type> do PHP em geral não são suportados.
     </para>
    </listitem>
    <listitem>
     <para>
      <type>array</type>s do PHP são convertidos para tabelas do Lua, e vice-versa.
     </para>
     <para>
      <itemizedlist>
       <listitem>
        <para>
         Note que Lua normalmente indexa arrays a partir de 1, enquanto o PHP indexa
         arrays a partir de 0. Nenhum ajuste é feito para essas
         convenções diferentes.
        </para>
       </listitem>
       <listitem>
        <para>Arrays autorreferenciais não são suportadas em nenhuma direção.</para>
       </listitem>
       <listitem>
        <para>Referências PHP são desreferenciadas.</para>
       </listitem>
       <listitem>
        <para>
         <literal>__pairs</literal> e <literal>__ipairs</literal> do Lua são processados
         <literal>__index</literal> é ignorado.
        </para>
       </listitem>
       <listitem>
        <para>
         Ao converter de PHP para Lua, chaves inteiras entre
         <literal>-2**53</literal> e <literal>2**53</literal> são representadas
         como números Lua. Todas as outras chaves são representadas como strings Lua.
        </para>
       </listitem>
       <listitem>
        <para>
         Ao converter de Lua para PHP, chaves diferentes de strings e
         números resultarão em erro, assim como colisões ao converter
         números em strings ou vice-versa (já que o PHP considera coisas como
         <literal>$a[0]</literal> e <literal>$a["0"]</literal> como sendo equivalentes).
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </listitem>
    <listitem>
     <para>
      Todos os outros tipos não são suportados e gerarão um erro/exceção,
      incluindo <type>object</type>s PHP em geral e tipos de thread e userdata do Lua.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   As funções Lua retornam inerentemente uma lista de resultados. Então, em caso de sucesso, este
   método retorna um <type>array</type> contendo todos os valores retornados por Lua,
   com chaves <type>int</type> começando a partir de zero. Lua pode não retornar nenhum resultado,
   nesse caso um array vazio é retornado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>args</parameter></term>
    <listitem>
     <para>
      Argumentos passados ​​para a função.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um <type>array</type> de valores retornados pela função, que pode estar vazio,
   &return.falseforfailure;.
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
