<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52c495140bdb84f45f186bfb1cccf09788b0121e Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.openssl-random-pseudo-bytes" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_random_pseudo_bytes</refname>
  <refpurpose>Gera uma sequência pseudo-aleatória de bytes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>openssl_random_pseudo_bytes</methodname>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter role="reference">strong_result</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gera uma <type>string</type> de bytes pseudo-aleatórios, com o número de bytes
   determinado pelo parâmetro <parameter>length</parameter>.
  </para>
  <para>
   Também indica se um algoritmo criptograficamente forte foi usado para produzir os
   bytes pseudo-aleatórios, e faz isso através do parâmetro opcional <parameter>strong_result</parameter>.
   É raro que isso seja &false;, mas alguns sistemas podem estar quebrados ou antigos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       O comprimento da sequência de bytes desejada. Deve ser um número inteiro positivo menor ou igual a <literal>2147483647</literal>.
       O PHP tentará converter este parâmetro em um número inteiro não nulo para usá-lo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>strong_result</parameter></term>
     <listitem>
      <para>
       Se passado para a função, conterá um valor <type>bool</type> que determina
       se o algoritmo usado era "criptograficamente forte", por exemplo, seguro para uso com GPG,
       senhas, etc. &true; se sim, caso contrário &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a &string; de bytes gerada.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>openssl_random_pseudo_bytes</function> lança uma <classname>Exception</classname>
   em caso de falha.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>strong_result</parameter> agora pode ser nulo.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       A função não retorna mais &false; em caso de falha, mas em vez disso lança uma <classname>Exception</classname>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>openssl_random_pseudo_bytes</function></title>
    <programlisting role="php">
<![CDATA[
<?php
for ($i = 1; $i <= 4; $i++) {
    $bytes = openssl_random_pseudo_bytes($i, $cstrong);
    $hex   = bin2hex($bytes);

    echo "Comprimentos: Bytes: $i e Hex: " . strlen($hex) . PHP_EOL;
    var_dump($hex);
    var_dump($cstrong);
    echo PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Comprimentos: Bytes: 1 e Hex: 2
string(2) "42"
bool(true)

Comprimentos: Bytes: 2 e Hex: 4
string(4) "dc6e"
bool(true)

Comprimentos: Bytes: 3 e Hex: 6
string(6) "288591"
bool(true)

Comprimentos: Bytes: 4 e Hex: 8
string(8) "ab86d144"
bool(true)

]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>random_bytes</function></member>
   <member><function>bin2hex</function></member>
   <member><function>crypt</function></member>
   <member><function>random_int</function></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
