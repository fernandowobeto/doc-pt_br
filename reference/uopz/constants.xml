<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c9490d424ec11a4fe92f07f08cff95c85c7d22df Maintainer: leonardolara Status: ready -->

<appendix xml:id="uopz.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Os seguintes opcodes são definidos como constantes pelo uopz antes da versão 5.0.0:
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-exit">
    <term>
     <constant>ZEND_EXIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado por exit() e die(), não recebe argumentos.
      Retorna o booleano &true; para sair, &false; para continuar.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-new">
    <term>
     <constant>ZEND_NEW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado pela construção do objeto,
      recebe a classe do objeto que está sendo criado como único argumento.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-throw">
    <term>
     <constant>ZEND_THROW</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado pela construção throw,
      recebe a classe da exceção lançada como único argumento.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-fetch-class">
    <term>
     <constant>ZEND_FETCH_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado após a composição,
      recebe o nome da classe que está sendo buscada como único argumento.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-trait">
    <term>
     <constant>ZEND_ADD_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado após a composição,
      recebe a classe à qual o Trait está sendo adicionada como o primeiro argumento,
      e o nome do Trait como o segundo argumento.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-add-interface">
    <term>
     <constant>ZEND_ADD_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado após a composição,
      recebe a classe à qual a interface está sendo adicionada como o primeiro argumento,
      e o nome da interface como o segundo argumento
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-instanceof">
    <term>
     <constant>ZEND_INSTANCEOF</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Invocado pelo operador instanceof,
      recebe o objeto a ser verificado como o primeiro argumento,
      e o nome da classe à qual esse objeto deve pertencer como o segundo argumento.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  As seguintes constantes controlam o comportamento da máquina virtual após a invocação de um manipulador de usuário.
  Tenha muito cuidado!
  Essas constantes foram removidas a partir do uopz 5.0.0.
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-user-opcode-continue">
    <term>
     <constant>ZEND_USER_OPCODE_CONTINUE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Avança 1 opcode e continua.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-enter">
    <term>
     <constant>ZEND_USER_OPCODE_ENTER</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Entra em novo op_array sem recursão.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-leave">
    <term>
     <constant>ZEND_USER_OPCODE_LEAVE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Retorna para chamar op_array dentro do mesmo executor.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Envia para o manipulador de opcode original.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-dispatch-to">
    <term>
     <constant>ZEND_USER_OPCODE_DISPATCH_TO</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Envia para um manipulador específico (operação OR com constante de opcode ZEND).
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-user-opcode-return">
    <term>
     <constant>ZEND_USER_OPCODE_RETURN</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Sai do executor (retorna da função).
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  Os seguintes modificadores são registrados como constantes pelo uopz:
 </para>
 <para>
  <variablelist>
   <varlistentry xml:id="constant.zend-acc-public">
    <term>
     <constant>ZEND_ACC_PUBLIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como públicas, o padrão.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-protected">
    <term>
     <constant>ZEND_ACC_PROTECTED</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como protegidas.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-private">
    <term>
     <constant>ZEND_ACC_PRIVATE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como privadas.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-static">
    <term>
     <constant>ZEND_ACC_STATIC</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como estáticas.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-final">
    <term>
     <constant>ZEND_ACC_FINAL</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como finais.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-abstract">
    <term>
     <constant>ZEND_ACC_ABSTRACT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as funções como abstratas.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-class">
    <term>
     <constant>ZEND_ACC_CLASS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Fictício registrado para consistência, o tipo padrão de entrada de classe.
      Removido a partir do uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-interface">
    <term>
     <constant>ZEND_ACC_INTERFACE</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as classes como interfaces.
      Removido a partir do uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-trait">
    <term>
     <constant>ZEND_ACC_TRAIT</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Marca as classes como Traits.
      Removido a partir do uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.zend-acc-fetch">
    <term>
     <constant>ZEND_ACC_FETCH</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <simpara>
      Usado somente para obtenção de sinalizadores.
      Removido a partir do uopz 5.0.0.
     </simpara>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
