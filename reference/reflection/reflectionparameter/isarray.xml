<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9b1673cf114a1e10c4563ab9223cb56aed552b89 Maintainer: leonardolara Status: ready --><!-- CREDITS: fernandowobeto -->
<refentry xml:id="reflectionparameter.isarray" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionParameter::isArray</refname>
  <refpurpose>Verifica se o parâmetro espera um array</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
   &warn.deprecated.function-8-0-0;
  <para>Veja o exemplo abaixo para uma forma alternativa de derivar esta informação.</para>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionParameter">
   <modifier role="attribute">#[\Deprecated]</modifier>
   <modifier>public</modifier> <type>bool</type><methodname>ReflectionParameter::isArray</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Verifica se o parâmetro espera um array.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &true; se um <type>array</type> for esperado, &false; caso contrário.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Esta função foi preterida em favor de
       <methodname>ReflectionParameter::getType</methodname>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Equivalente a PHP 8.0.0</title>
    <para>
     A partir do PHP 8.0.0, o código a seguir reportará se um tipo declara arrays,
     inclusive como parte de uma união.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function declaresArray(ReflectionParameter $reflectionParameter): bool
{
    $reflectionType = $reflectionParameter->getType();

    if (!$reflectionType) return false;

    $types = $reflectionType instanceof ReflectionUnionType
        ? $reflectionType->getTypes()
        : [$reflectionType];

    return in_array('array', array_map(fn(ReflectionNamedType $t) => $t->getName(), $types));
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionParameter::isOptional</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
