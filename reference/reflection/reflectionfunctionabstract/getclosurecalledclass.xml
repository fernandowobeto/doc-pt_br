<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 1870b4c6aa53e14eec6201eb63f28ed6be6349f7 Maintainer: leonardolara Status: ready -->
<refentry xml:id="reflectionfunctionabstract.getclosurecalledclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ReflectionFunctionAbstract::getClosureCalledClass</refname>
  <refpurpose>Retorna a classe correspondente a static:: dentro de uma closure</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionFunctionAbstract">
   <modifier>public</modifier> <type class="union"><type>ReflectionClass</type><type>null</type></type><methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Retorna a classe como uma <classname>ReflectionClass</classname> que
   corresponde a resolver o nome de classe associado a <literal>static::</literal> dentro da
   <classname>Closure</classname>.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Retorna uma <classname>ReflectionClass</classname> que corresponde à classe
   representada por <literal>static::</literal> na <classname>Closure</classname>.
   Se a função não é uma closure ou se ela tiver escopo global, &null;
   é retornado.
  </simpara>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Exemplo que mostra a diferença entre
    <methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>,
    <methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname>,
    e <methodname>ReflectionFunctionAbstract::getClosureThis</methodname>
    com uma closure no contexto de objeto
   </title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    public function getClosure()
    {
        var_dump(self::class, static::class);

        return function() {};
    }
}

class B extends A {}

$b = new B();
$c = $b->getClosure();
$r = new ReflectionFunction($c);

var_dump($r->getClosureThis()); // $this === $b, já que uma closure não estática toma o contexto de objeto
var_dump($r->getClosureScopeClass()); // Corresponde a resolver self::class dentro de uma closure
var_dump($r->getClosureCalledClass()); // Corresponde a resolver static::class dentro de uma closure

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(1) "A"
string(1) "B"
object(B)#1 (0) {
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "A"
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "B"
}
]]>
   </screen>
  </example>
  <example>
   <title>
    Exemplo que mostra a diferença entre
    <methodname>ReflectionFunctionAbstract::getClosureCalledClass</methodname>,
    <methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname>,
    e <methodname>ReflectionFunctionAbstract::getClosureThis</methodname>
    com uma closure estática sem um contexto de objeto
   </title>
   <programlisting role="php">
    <![CDATA[
<?php

class A
{
    public function getClosure()
    {
        var_dump(self::class, static::class);

        return static function() {};
    }
}

class B extends A {}

$b = new B();
$c = $b->getClosure();
$r = new ReflectionFunction($c);

var_dump($r->getClosureThis()); // NULL, já que a pseudo-variável $this não está disponível no contexto estático
var_dump($r->getClosureScopeClass()); // Corresponde a resolver self::class dentro de uma closure
var_dump($r->getClosureCalledClass()); // Corresponde a resolver static::class dentro de uma closure

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(1) "A"
string(1) "B"
NULL
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "A"
}
object(ReflectionClass)#4 (1) {
  ["name"]=>
  string(1) "B"
}

]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>ReflectionFunctionAbstract::getClosureScopeClass</methodname></member>
   <member><methodname>ReflectionFunctionAbstract::getClosureThis</methodname></member>
   <member><xref linkend="language.oop5.late-static-bindings" /></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
