<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c4aabaa0b97ef1ecc00cf2cd539ea186c6a855ae Maintainer: leonardolara Status: ready --><!-- CREDITS: fernandowobeto,leonardolara -->

<refentry xml:id="reflectionproperty.setvalue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionProperty::setValue</refname>
  <refpurpose>Define valor da propriedade</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="ReflectionProperty">
   <modifier>public</modifier> <type>void</type><methodname>ReflectionProperty::setValue</methodname>
   <methodparam><type class="union"><type>object</type><type>null</type></type><parameter>object</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>ReflectionProperty::setValue</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Define (altera) o valor da propriedade.
  </para>
  <note>
   <simpara>
    Para definir valores de propriedades estáticas, use <literal>ReflectionProperty::setValue(null, $value)</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       Para propriedades estáticas, informe &null;.
       Para propriedades não estáticas, informe o objeto.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       O novo valor.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       Chamar este método com um único argumento está descontinuado,
       use <literal>ReflectionProperty::setValue(null, $value)</literal>
       para propriedades estáticas.
      </entry>
     </row>
     <row>
      <entry>8.1.0</entry>
      <entry>
       Propriedades privadas e protegidas podem ser acessadas por
       <methodname>ReflectionProperty::setValue</methodname> imediatamente.
       Anteriormente, eles precisavam ser acessíveis chamando
       <methodname>ReflectionProperty::setAccessible</methodname>; caso contrário,
       uma <classname>ReflectionException</classname> era lançada.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <methodname>ReflectionProperty::setValue</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static $staticProperty;

    public $property;
    protected $privateProperty;
}

$reflectionClass = new ReflectionClass('Foo');

// A partir do PHP 8.3, passar null como primeiro argumento é necessário
// para acessar propriedades estáticas.
$reflectionProperty = $reflectionClass->getProperty('staticProperty');
$reflectionProperty->setValue(null, 'foo');
var_dump(Foo::$staticProperty);

$foo = new Foo;

$reflectionClass->getProperty('property')->setValue($foo, 'bar');
var_dump($foo->property);

$reflectionProperty = $reflectionClass->getProperty('privateProperty');
$reflectionProperty->setAccessible(true); // requerido apenas antes do PHP 8.1.0
$reflectionProperty->setValue($foo, 'foobar');
var_dump($reflectionProperty->getValue($foo));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
string(6) "foobar"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionProperty::getValue</methodname></member>
    <member><methodname>ReflectionProperty::setAccessible</methodname></member>
    <member><methodname>ReflectionClass::setStaticPropertyValue</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
