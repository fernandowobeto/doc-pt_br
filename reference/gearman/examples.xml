<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 91016be2c8e8b082b90dec74354199acae87120d Maintainer: leonardolara Status: ready -->

<chapter xml:id="gearman.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="gearman.examples-reverse">
  <title>Uso básico</title>
  <para>
   <example>
    <title>Cliente e trabalhador básico do Gearman</title>
    <para>
     Este exemplo mostra um cliente e um trabalhador muito simples. O cliente envia uma string
     para o servidor de trabalho, e o trabalhador inverte a string e a envia de volta.
     O trabalho é executado de forma síncrona.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# Cria nosso objeto cliente.
$gmclient= new GearmanClient();

# Adiciona servidor padrão (localhost).
$gmclient->addServer();

echo "Enviando tarefa\n";

# Envia trabalho reverso
do
{
  $result = $gmclient->doNormal("reverse", "Hello!");

  # Verifica vários pacotes de retorno e erros.
  switch($gmclient->returnCode())
  {
    case GEARMAN_WORK_DATA:
      echo "Dados: $result\n";
      break;
    case GEARMAN_WORK_STATUS:
      list($numerator, $denominator)= $gmclient->doStatus();
      echo "Status: $numerator/$denominator concluído\n";
      break;
    case GEARMAN_WORK_FAIL:
      echo "Falhou\n";
      exit;
    case GEARMAN_SUCCESS:
      echo "Sucesso: $result\n";
      break;
    default:
      echo "RET: " . $gmclient->returnCode() . "\n";
      exit;
  }
}
while($gmclient->returnCode() != GEARMAN_SUCCESS);

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Começando\n";

# Cria nosso objeto trabalhador.
$gmworker= new GearmanWorker();

# Adiciona servidor padrão (localhost).
$gmworker->addServer();

# Registra a função "reverse" com o servidor. Altera para a função
# "reverse_fn_fast" para um trabalhador mais rápido sem saída.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando por tarefa...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "Código de retorno: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tarefa recebida: " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Carga de trabalho: $workload ($workload_size)\n";

  # Este laço de status não é necessário, apenas mostra como ele funciona
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Status de envio: " . ($x + 1) . "/$workload_size concluído\n";
    $job->sendStatus($x, $workload_size);
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado: $result\n";

  # Retorna o que queremos enviar de volta ao cliente.
  return $result;
}

# Uma versão muito mais simples e menos detalhada da função acima seria:
function reverse_fn_fast($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
     &example.outputs.similar;
    <screen>
<![CDATA[
% php reverse_worker.php
Começando
Esperando por tarefa...
Tarefa recebida: H:foo.local:36
Carga de trabalho: Hello! (6)
Status de envio: 1/6 concluído
Status de envio: 2/6 concluído
Status de envio: 3/6 concluído
Status de envio: 4/6 concluído
Status de envio: 5/6 concluído
Status de envio: 6/6 concluído
Resultado: !olleH
]]>
    </screen>
    <screen>
<![CDATA[
% php reverse_client.php
Começando
Enviando tarefa
Status: 1/6 concluído
Status: 2/6 concluído
Status: 3/6 concluído
Status: 4/6 concluído
Status: 5/6 concluído
Status: 6/6 concluído
Sucesso: !olleH
]]>
    </screen>
   </example>
  </para>
 </section>
 <section xml:id="gearman.examples-reverse-bg">
  <title>Cliente e trabalhador básicos do Gearman, histórico</title>
  <para>
   <example>
    <title>Cliente e trabalhador básicos do Gearman, histórico</title>
    <para>
     Este exemplo mostra um cliente e um trabalhador muito simples. O cliente envia uma string
     para o servidor de trabalho como um trabalho em segundo plano, e o trabalhador inverte a string.
     Observe que, como o trabalho é realizado de forma assíncrona, o cliente não
     espera que o trabalho seja concluído e sai (e, portanto, o cliente nunca recebe os resultados).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# cria nosso objeto cliente
$gmclient= new GearmanClient();

# adiciona o servidor padrão (localhost)
$gmclient->addServer();

# executa o cliente "reverse" em segundo plano
$job_handle = $gmclient->doBackground("reverse", "this is a test");

if ($gmclient->returnCode() != GEARMAN_SUCCESS)
{
  echo "código de retorno incorreto\n";
  exit;
}

echo "pronto!\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Começando\n";

# Cria nosso objeto trabalhador.
$gmworker= new GearmanWorker();

# Adiciona servidor padrão (localhost).
$gmworker->addServer();

# Registra a função "reverse" com o servidor. Altera para a função
# "reverse_fn_fast" para um trabalhador mais rápido sem saída.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando por tarefa...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "Código de retorno: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tarefa recebida: " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Carga de trabalho: $workload ($workload_size)\n";

  # Este laço de status não é necessário, apenas mostra como ele funciona
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Status de envio: " . ($x + 1) . "/$workload_size concluído\n";
    $job->sendStatus($x, $workload_size);
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado: $result\n";

  # Retorna o que queremos enviar de volta ao cliente.
  return $result;
}

# Uma versão muito mais simples e menos detalhada da função acima seria:
function reverse_fn_fast($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
% php reverse_worker.php
Começando
Esperando por tarefa...
Tarefa recebida: H:foo.local:41
Carga de trabalho: this is a test (14)
Status de envio: 1/14 concluído
Status de envio: 2/14 concluído
Status de envio: 3/14 concluído
Status de envio: 4/14 concluído
Status de envio: 5/14 concluído
Status de envio: 6/14 concluído
Status de envio: 7/14 concluído
Status de envio: 8/14 concluído
Status de envio: 9/14 concluído
Status de envio: 10/14 concluído
Status de envio: 11/14 concluído
Status de envio: 12/14 concluído
Status de envio: 13/14 concluído
Status de envio: 14/14 concluído
Resultado: tset a si siht
]]>
    </screen>
    <screen>
<![CDATA[
% php reverse_client_bg.php
pronto!
]]>
    </screen>
   </example>
  </para>
 </section>
 <section xml:id="gearman.examples-reverse-task">
  <title>Cliente e trabalhador básicos do Gearman, enviando tarefas</title>
  <para>
   <example>
    <title>Cliente e trabalhador básicos do Gearman, enviando tarefas</title>
    <para>
     Neste exemplo, o cliente reverso básico foi estendido para executar duas tarefas em paralelo.
     O trabalhador reverso não foi alterado, exceto para adicionar o envio de dados de volta durante o processamento.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# cria o cliente gearman
$gmc= new GearmanClient();

# adiciona o servidor padrão (localhost)
$gmc->addServer();

# registra algumas funções de retorno
$gmc->setCreatedCallback("reverse_created");
$gmc->setDataCallback("reverse_data");
$gmc->setStatusCallback("reverse_status");
$gmc->setCompleteCallback("reverse_complete");
$gmc->setFailCallback("reverse_fail");

# define alguns dados de aplicação arbitrários
$data['foo'] = 'bar';

# adiciona duas tarefas
$task= $gmc->addTask("reverse", "foo", $data);
$task2= $gmc->addTaskLow("reverse", "bar", NULL);

# executa as tarefas em paralelo (assumindo vários trabalhadores)
if (! $gmc->runTasks())
{
    echo "ERRO " . $gmc->error() . "\n";
    exit;
}

echo "PRONTO\n";

function reverse_created($task)
{
    echo "CRIADO: " . $task->jobHandle() . "\n";
}

function reverse_status($task)
{
    echo "STATUS: " . $task->jobHandle() . " - " . $task->taskNumerator() .
         "/" . $task->taskDenominator() . "\n";
}

function reverse_complete($task)
{
    echo "CONCLUÍDO: " . $task->jobHandle() . ", " . $task->data() . "\n";
}

function reverse_fail($task)
{
    echo "FALHOU: " . $task->jobHandle() . "\n";
}

function reverse_data($task)
{
    echo "DADOS: " . $task->data() . "\n";
}

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Começando\n";

# Cria nosso objeto trabalhador.
$gmworker= new GearmanWorker();

# Adiciona servidor padrão (localhost).
$gmworker->addServer();

# Registra a função "reverse" com o servidor. Altera para a função
# "reverse_fn_fast" para um trabalhador mais rápido sem saída.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando por tarefa...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "Código de retorno: " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tarefa recebida: " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Carga de trabalho: $workload ($workload_size)\n";

  # Este laço de status não é necessário, apenas mostra como ele funciona
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Status de envio: " . ($x + 1) . "/$workload_size concluído\n";
    $job->sendStatus($x+1, $workload_size);
    $job->sendData(substr($workload, $x, 1));
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado: $result\n";

  # Retorna o que queremos enviar de volta ao cliente.
  return $result;
}

# Uma versão muito mais simples e menos detalhada da função acima seria:
function reverse_fn_fast($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
% php reverse_worker.php
Começando
Esperando por tarefa...
Tarefa recebida: H:foo.local:45
Carga de trabalho: foo (3)
Status de envio: 1/3 concluído
Status de envio: 2/3 concluído
Status de envio: 3/3 concluído
Resultado: oof
Tarefa recebida: H:foo.local:44
Carga de trabalho: bar (3)
Status de envio: 1/3 concluído
Status de envio: 2/3 concluído
Status de envio: 3/3 concluído
Resultado: rab
]]>
    </screen>
    <screen>
<![CDATA[
% php reverse_client_task.php
CRIADO: H:foo.local:44
CRIADO: H:foo.local:45
STATUS: H:foo.local:45 - 1/3
DADOS: f
STATUS: H:foo.local:45 - 2/3
DADOS: o
STATUS: H:foo.local:45 - 3/3
DADOS: o
CONCLUÍDO: H:foo.local:45, oof
STATUS: H:foo.local:44 - 1/3
DADOS: b
STATUS: H:foo.local:44 - 2/3
DADOS: a
STATUS: H:foo.local:44 - 3/3
DADOS: r
CONCLUÍDO: H:foo.local:44, rab
PRONTO
]]>
    </screen>
   </example>
  </para>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

