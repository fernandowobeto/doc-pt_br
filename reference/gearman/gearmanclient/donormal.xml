<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3c0b61c45a5dabe46865510311e57b77ea3dddb7 Maintainer: leonardolara Status: ready -->
<refentry xml:id="gearmanclient.donormal" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>GearmanClient::doNormal</refname>
  <refpurpose>Executa uma única tarefa e retorna um resultado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="GearmanClient">
   <modifier>public</modifier> <type>string</type><methodname>GearmanClient::doNormal</methodname>
   <methodparam><type>string</type><parameter>function</parameter></methodparam>
   <methodparam><type>string</type><parameter>workload</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>unique</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Executa uma única tarefa e retorna uma representação de string do resultado. Cabe ao
   <classname>GearmanClient</classname> e ao <classname>GearmanWorker</classname>
   concordar com o formato do resultado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.functionname;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>workload</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.workload;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>unique</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.unique;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Uma string que representa os resultados da execução de uma tarefa.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Envio de tarefa simples com retorno imediato</title>
    <programlisting role="php">
<![CDATA[
<?php

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Código do cliente

echo "Começando\n";

# Cria nosso objeto cliente.
$gmclient= new GearmanClient();

# Adiciona servidor padrão (localhost).
$gmclient->addServer();

echo "Enviando tarefa\n";

$result = $gmclient->doNormal("reverse", "Hello!");

echo "Sucesso: $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Começando\n";

# Cria nosso objeto trabalhador.
$gmworker= new GearmanWorker();

# Adiciona servidor padrão (localhost).
$gmworker->addServer();

# Registra a função "reversa" com o servidor. Altera a função do trabalhador para
# "reverse_fn_fast" para um trabalhador mais rápido sem saída.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando tarefa...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "Código de retorno:" . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Começando
Enviando tarefa
Sucesso: !olleH
]]>
    </screen>
   </example>
   <example>
    <title>Enviando uma tarefa e recuperando status incremental</title>
    <para>
     Uma tarefa é enviada e o script faz um laço para recuperar informações de status.
     O trabalhador tem um atraso artificial que resulta em uma tarefa de longa execução
     e envia status e dados conforme o processamento ocorre.
     Cada chamada subsequente a <methodname>GearmanClient::doNormal</methodname>
     produz informações de status na tarefa em execução.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# Código do cliente

# Cria nosso objeto cliente.
$gmclient= new GearmanClient();

# Adiciona servidor padrão (localhost).
$gmclient->addServer();

echo "Enviando tarefa\n";

# Envia tarefa reversa
do
{
  $result = $gmclient->doNormal("reverse", "Hello!");
  # Verifica vários pacotes de retorno e erros.

  switch($gmclient->returnCode())
  {
    case GEARMAN_WORK_DATA:
      echo "Dados: $result\n";
      break;
    case GEARMAN_WORK_STATUS:
      list($numerator, $denominator)= $gmclient->doStatus();
      echo "Status: $numerator/$denominator concluído\n";
      break;
    case GEARMAN_WORK_FAIL:
      echo "Falhou\n";
      exit;
    case GEARMAN_Sucesso:
      break;
    default:
      echo "RET: " . $gmclient->returnCode() . "\n";
      echo "Error: " . $gmclient->error() . "\n";
      echo "Errno: " . $gmclient->getErrno() . "\n";
      exit;
  }
}
while($gmclient->returnCode() != GEARMAN_SUCCESS);

echo "Sucesso: $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Código do trabalhador

echo "Começando\n";

# Cria nosso objeto trabalhador.
$gmworker= new GearmanWorker();

# Adiciona servidor padrão (localhost).
$gmworker->addServer();

# Registra a função "reversa" com o servidor.
$gmworker->addFunction("reverse", "reverse_fn");

print "Esperando tarefa...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "Código de retorno:" . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tarefa recebida: " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Carga de trabalho: $workload ($workload_size)\n";

  # Este laço de status não é necessário, apenas mostra como ele funciona
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Status de envio: " + $x + 1 . "/$workload_size concluído\n";
    $job->sendStatus($x+1, $workload_size);
    $job->sendData(substr($workload, $x, 1));
    sleep(1);
  }

  $result= strrev($workload);
  echo "Resultado: $result\n";

  # Retorna o que queremos enviar de volta ao cliente.
  return $result;
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <para>
     Worker output:
    </para>
    <screen>
<![CDATA[
Começando
Esperando tarefa...
Tarefa recebida: H:foo.local:106
Carga de trabalho: Hello! (6)
1/6 concluído
2/6 concluído
3/6 concluído
4/6 concluído
5/6 concluído
6/6 concluído
Resultado: !olleH
]]>
    </screen>
    <para>
     Client output:
    </para>
    <screen>
<![CDATA[
Começando
Enviando tarefa
Status: 1/6 concluído
Dados: H
Status: 2/6 concluído
Dados: e
Status: 3/6 concluído
Dados: l
Status: 4/6 concluído
Dados: l
Status: 5/6 concluído
Dados: o
Status: 6/6 concluído
Dados: !
Sucesso: !olleH
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>GearmanClient::doHigh</methodname></member>
    <member><methodname>GearmanClient::doLow</methodname></member>
    <member><methodname>GearmanClient::doBackground</methodname></member>
    <member><methodname>GearmanClient::doHighBackground</methodname></member>
    <member><methodname>GearmanClient::doLowBackground</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
