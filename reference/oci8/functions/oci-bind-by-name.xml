<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.oci-bind-by-name" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_bind_by_name</refname>
  <refpurpose>Vincula uma variável PHP a um marcador Oracle</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_bind_by_name</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam><type>string</type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>max_length</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Vincula uma variável PHP <parameter>var</parameter> ao marcador de variável vinculada do Oracle
   <parameter>param</parameter>. A vinculação é
   importante para o desempenho do banco de dados Oracle e também é uma forma de
   evitar problemas de segurança de injeção de SQL.
  </para>

  <para>
   A vinculação permite que o banco de dados reutilize o contexto da instrução e
   armazena em cache execuções anteriores da instrução, mesmo que outro
   usuário ou processo a tenha executado originalmente. A vinculação reduz as preocupações
   com injeção de SQL porque os dados associados a uma variável vinculada
   nunca são tratados como parte da instrução SQL. Ela não
   precisa de escape.
  </para>

  <para>
   Variáveis ​​PHP que foram vinculadas podem ser alteradas e a
   declaração reexecutada sem a necessidade de analisar novamente a declaração ou
   revincular.
  </para>

  <para>
   No Oracle, as variáveis de vinculação são comumente divididas
   em vinculações <literal>IN</literal> para valores que são passados ​​para
   o banco de dados, e vinculações <literal>OUT</literal> para valores que são
   retornados ao PHP. Uma variável de vinculação pode ser
   tanto <literal>IN</literal> quanto <literal>OUT</literal>. O fato de uma
   variável de vinculação ser usada para entrada ou saída é determinado em
   tempo de execução.
  </para>

  <para>
   É necessário especificar <parameter>max_length</parameter> ao usar
   uma vinculação <literal>OUT</literal> para que o PHP aloque memória suficiente
   para armazenar o valor retornado.
  </para>

  <para>
   Para vinculações <literal>IN</literal>, é recomendado definir
   o comprimento <parameter>max_length</parameter> se a instrução for
   reexecutada várias vezes com valores diferentes para a variável PHP.
   Caso contrário, o Oracle pode truncar os dados para o comprimento do
   valor inicial da variável PHP. Se não for conhecido o
   comprimento máximo, deve ser chamada novamente a função <function>oci_bind_by_name</function>
   com o tamanho de dados atual antes de
   cada chamada <function>oci_execute</function>. Vincular um
   comprimento desnecessariamente grande trará um impacto na memória do processo
   no banco de dados.
  </para>

  <para>
   Uma chamada de vinculação informa ao Oracle de qual endereço de memória os dados serão lidos.
   Para vinculações <literal>IN</literal>, esse endereço precisa conter
   dados válidos quando <function>oci_execute</function> for chamada. Isso
   significa que a variável vinculada deve permanecer no escopo até
   a execução. Se isso não acontecer, resultados inesperados ou erros como
   "ORA-01460: unimplemented or unreasonable conversion requested" (solicitada conversão não implementada não razoável)
   podem ocorrer. Para vinculações <literal>OUT</literal>, um dos sintomas é quando nenhum
   valor é definido na variável PHP.
  </para>

  <para>
   Para uma instrução que é executada repetidamente, valores vinculados que
   nunca mudam podem reduzir a capacidade do otimizador Oracle em
   escolher o melhor plano de execução de instrução. Instruções de execução longa
   que raramente são reexecutadas podem não se beneficiar da vinculação. No entanto,
   em ambos os casos a vinculação pode ser mais segura do que juntar strings em uma
   instrução SQL, pois isso pode ser um risco de segurança se o texto não filtrado do usuário
   for concatenado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Um identificador de instrução OCI8 válido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       O marcador de variável vinculada prefixado com dois pontos usado na instrução.
       Os dois pontos são opcionais
       em <parameter>param</parameter>. O Oracle não usa
       pontos de interrogação para marcadores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       A variável PHP a ser associada a <parameter>param</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max_length</parameter></term>
     <listitem>
      <para>
       Define o comprimento máximo para os dados. Se for definido como -1, esta
       função usará o comprimento atual
       de <parameter>var</parameter> para definir o comprimento
       máximo. Neste caso, o <parameter>var</parameter> deve
       existir e conter dados
       quando <function>oci_bind_by_name</function> for chamada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       O tipo de dados como o Oracle tratará os dados. O
       <parameter>type</parameter> padrão usado
       é <constant>SQLT_CHR</constant>. O Oracle converterá os dados
       entre este tipo e a coluna do banco de dados (ou tipo de variável PL/SQL),
       quando possível.
      </para>
      <para>
       Se for necessário vincular um tipo de dado abstrato (LOB/ROWID/BFILE), ele
       deve ser alocado primeiro usando a
       função <function>oci_new_descriptor</function>. O parâmetro
       <parameter>length</parameter> não é usado para tipos de dados abstratos
       e deve ser definido como -1.
      </para>
      <para>
       Os valores possíveis para <parameter>type</parameter> são:
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLT_BFILEE</constant> ou <constant>OCI_B_BFILE</constant>
          <!-- really only single E --> - para BFILEs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CFILEE</constant> ou <constant>OCI_B_CFILEE</constant>
          - para CFILEs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CLOB</constant> ou <constant>OCI_B_CLOB</constant>
          - para CLOBs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BLOB</constant> ou <constant>OCI_B_BLOB</constant>
          - para BLOBs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RDD</constant> ou <constant>OCI_B_ROWID</constant>
          - para ROWIDs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_NTY</constant> ou <constant>OCI_B_NTY</constant>
          - para tipos de dados nomeados;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_INT</constant> ou <constant>OCI_B_INT</constant> - para inteiros;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CHR</constant> - para VARCHARs;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BIN</constant> ou <constant>OCI_B_BIN</constant>
          - para colunas RAW;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LNG</constant> - para colunas LONG;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LBI</constant> - para colunas LONG RAW;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RSET</constant> - para cursores criados
          com <function>oci_new_cursor</function>;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BOL</constant> ou <constant>OCI_B_BOL</constant>
          - para BOOLEANs PL/SQL (Requer Oracle Database 12c)
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Inserindo dados com <function>oci_bind_by_name</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Crie a tabela com:
//   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn,"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)");

$id = 1;
$text = "Dados a inserir     ";
oci_bind_by_name($stid, ":id_bv", $id);
oci_bind_by_name($stid, ":text_bv", $text);
oci_execute($stid);

// A tabela agora contém: 1, 'Dados a inserir     '

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando uma vez para múltiplas execuções</title>
    <programlisting role="php">
<![CDATA[
<?php

// Crie a tabela com:
//   CREATE TABLE mytab (id NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$a = array(1,3,5,7,11);  // dados a inserir

$stid = oci_parse($conn, 'INSERT INTO mytab (id) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $v, 20);
foreach ($a as $v) {
    $r = oci_execute($stid, OCI_DEFAULT);  // não confirma automaticamente
}
oci_commit($conn); // confirma tudo de uma vez

// A tabela contém cinco linhas: 1, 3, 5, 7, 11

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando com um laço <literal>foreach</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT * FROM departments WHERE department_name = :dname AND location_id = :loc';
$stid = oci_parse($conn, $sql);

$ba = array(':dname' => 'IT Support', ':loc' => 1700);

foreach ($ba as $key => $val) {

    // oci_bind_by_name($stid, $key, $val) não funciona
    // porque ela vincula cada marcado à mesma localização: $val
    // em vez disso, use a localização real dos dados: $ba[$key]
    oci_bind_by_name($stid, $key, $ba[$key]);
}

oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
foreach ($row as $item) {
    print $item."<br>\n";
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando em uma cláusula WHERE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect("hr", "hrpwd", "localhost/XE");
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE department_id = :didbv ORDER BY last_name';
$stid = oci_parse($conn, $sql);
$didbv = 60;
oci_bind_by_name($stid, ':didbv', $didbv);
oci_execute($stid);
while (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {
    echo $row['LAST_NAME'] ."<br>\n";
}

// O resultado é
//    Austin
//    Ernst
//    Hunold
//    Lorentz
//    Pataballa

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando com uma cláusula LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Encontre todas as cidades que começam com 'South'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE city LIKE :bv");
$city = 'South%';  // '%' é um coringa no SQL
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// O resultado é
//   South Brunswick
//   South San Francisco
//   Southlake

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando com REGEXP_LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Encontre todas as cidades que contenham 'ing'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE REGEXP_LIKE(city, :bv)");
$city = '.*ing.*';
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// O resultado é
//   Beijing
//   Singapore

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Para um número pequeno e fixo de condições de cláusula IN, use variáveis vinculadas
   individuais. Valores desconhecidos no momento da execução podem ser definidos como NULL.
   Isso permite que uma única instrução seja usada por todos os usuários
   do aplicativo, maximizando a eficiência do cache do Oracle DB.
  </para>

  <para>
   <example>
    <title>Vinculando vários valores em uma cláusula IN</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE employee_id in (:e1, :e2, :e3)';
$stid = oci_parse($conn, $sql);
$mye1 = 103;
$mye2 = 104;
$mye3 = NULL; // finja que não nos foi dado esse valor
oci_bind_by_name($stid, ':e1', $mye1);
oci_bind_by_name($stid, ':e2', $mye2);
oci_bind_by_name($stid, ':e3', $mye3);
oci_execute($stid);
oci_fetch_all($stid, $res);
foreach ($res['LAST_NAME'] as $name) {
    print $name ."<br>\n";
}

// O resultado é
//   Ernst
//   Hunold

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando um ROWID retornado por uma consulta</title>
    <programlisting role="php">
<![CDATA[
<?php

// Crie a tabela com:
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//   INSERT INTO mytab (id, salary, name) VALUES (1, 100, 'Chris');
//   COMMIT;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT ROWID, name FROM mytab WHERE id = :id_bv FOR UPDATE');
$id = 1;
oci_bind_by_name($stid, ':id_bv', $id);
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
$rid = $row['ROWID'];
$name = $row['NAME'];

// Altera nome para maiúsculas e salva as alterações
$name = strtoupper($name);
$stid = oci_parse($conn, 'UPDATE mytab SET name = :n_bv WHERE ROWID = :r_bv');
oci_bind_by_name($stid, ':n_bv', $name);
oci_bind_by_name($stid, ':r_bv', $rid, -1, OCI_B_ROWID);
oci_execute($stid);

// A tabela agora contém 1, 100, CHRIS

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculando um ROWID em INSERT</title>
    <programlisting role="php">
<![CDATA[
<?php

// Este exemplo insere um id e um nome e, em seguida, atualiza o salário
// Crie a tabela com:
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//
// Baseado no exemplo ROWID original de thies at thieso dot net (980221)

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = "INSERT INTO mytab (id, name) VALUES(:id_bv, :name_bv)
        RETURNING ROWID INTO :rid";

$ins_stid = oci_parse($conn, $sql);

$rowid = oci_new_descriptor($conn, OCI_D_ROWID);
oci_bind_by_name($ins_stid, ":id_bv",   $id,    10);
oci_bind_by_name($ins_stid, ":name_bv", $name,  32);
oci_bind_by_name($ins_stid, ":rid",     $rowid, -1, OCI_B_ROWID);

$sql = "UPDATE mytab SET salary = :salary WHERE ROWID = :rid";
$upd_stid = oci_parse($conn, $sql);
oci_bind_by_name($upd_stid, ":rid", $rowid, -1, OCI_B_ROWID);
oci_bind_by_name($upd_stid, ":salary", $salary,   32);

// ids e nomes para inserir
$data = array(1111 => "Larry",
              2222 => "Bill",
              3333 => "Jim");

// Salário de cada pessoa
$salary = 10000;

// Insere e atualiza imediatamente cada linha
foreach ($data as $id => $name) {
    oci_execute($ins_stid);
    oci_execute($upd_stid);
}

$rowid->free();
oci_free_statement($upd_stid);
oci_free_statement($ins_stid);

// Mostra as novas linhas
$stid = oci_parse($conn, "SELECT * FROM mytab");
oci_execute($stid);
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    var_dump($row);
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Vinculação para uma função armazenada PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

//  Antes de executar o programa PHP, crie uma função armazenada em
//  SQL*Plus ou SQL Developer:
//
//  CREATE OR REPLACE FUNCTION myfunc(p IN NUMBER) RETURN NUMBER AS
//  BEGIN
//      RETURN p * 3;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p = 8;

$stid = oci_parse($conn, 'begin :r := myfunc(:p); end;');
oci_bind_by_name($stid, ':p', $p);

// O valor de retorno é uma vinculação OUT. O tipo padrão
// será um tipo string, então vincular um comprimento 40
// significa que no máximo 40 dígitos serão retornados.
oci_bind_by_name($stid, ':r', $r, 40);

oci_execute($stid);

print "$r\n";   // prints 24

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Vinculando parâmetros para um procedimento armazenado PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

//  Antes de executar o programa PHP, crie um procedimento armazenado em
//  SQL*Plus ou SQL Developer:
//
//  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS
//  BEGIN
//      p2 := p1 * 2;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p1 = 8;

$stid = oci_parse($conn, 'begin myproc(:p1, :p2); end;');
oci_bind_by_name($stid, ':p1', $p1);

// O segundo parâmetro do procedimento é uma vinculação OUT. O tipo padrão
// será um tipo string, então vincular um comprimento 40 significa que no máximo 40
// dígitos serão retornados.
oci_bind_by_name($stid, ':p2', $p2, 40);

oci_execute($stid);

print "$p2\n";   // exibe 16

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Vinculando uma coluna CLOB</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de executar, crie a tabela:
//     CREATE TABLE mytab (mykey NUMBER, myclob CLOB);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$mykey = 12343;  // chave arbitrária para este exemplo;

$sql = "INSERT INTO mytab (mykey, myclob)
        VALUES (:mykey, EMPTY_CLOB())
        RETURNING myclob INTO :myclob";

$stid = oci_parse($conn, $sql);
$clob = oci_new_descriptor($conn, OCI_D_LOB);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_bind_by_name($stid, ":myclob", $clob, -1, OCI_B_CLOB);
oci_execute($stid, OCI_DEFAULT);
$clob->save("A very long string");

oci_commit($conn);

// Obtendo dados CLOB

$query = 'SELECT myclob FROM mytab WHERE mykey = :mykey';

$stid = oci_parse ($conn, $query);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_execute($stid);

print '<table border="1">';
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) {
    print '<tr><td>'.$row['MYCLOB'].'</td></tr>';
    // Em um laço, liberar a variável grande antes da segunda busca reduz o pico de uso de memória do PHP
    unset($row);
}
print '</table>';

?>
]]>
   </programlisting>
  </example>
  </para>

  <para>
  <example>
   <title>Vinculando um BOOLEAN PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$plsql =
  "begin
    :output1 := true;
    :output2 := false;
   end;";

$s = oci_parse($c, $plsql);
oci_bind_by_name($s, ':output1', $output1, -1, OCI_B_BOL);
oci_bind_by_name($s, ':output2', $output2, -1, OCI_B_BOL);
oci_execute($s);
var_dump($output1);  // true
var_dump($output2);  // false

?>
]]>
   </programlisting>
  </example>
  </para>

 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Não use <function>addslashes</function>
    e <function>oci_bind_by_name</function> simultaneamente, pois nenhum
    escape é necessário. Qualquer escape aplicado magicamente será gravado
    no banco de dados porque <function>oci_bind_by_name</function>
    insere dados literalmente e não remove asaps ou caracteres de
    escape.
   </para>
  </warning>
  <note>
   <para>
    Se uma string for vinculada a uma coluna <literal>CHAR</literal> em
    uma cláusula <literal>WHERE</literal>, lembre-se de que o Oracle usa
    semântica de comparação com preenchimento em branco para colunas <literal>CHAR</literal>.
    A variável PHP deve ser preenchida com preenchimento em branco para a mesma
    largura da coluna para que a cláusula <literal>WHERE</literal>
    seja bem-sucedida.
   </para>
  </note>
  <note>
   <para>
     O argumento <parameter>var</parameter> do PHP é uma referência. Algumas
     formas de laços não funcionam como esperado:
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value)  {
    oci_bind_by_name($stid, $key, $value);
}
?>
]]>
     </programlisting>
   </informalexample>
   <para>
     Isso vincula cada chave à localização de $value, então todas as variáveis
     vinculadas acabam apontando para o valor da última iteração do laço.
     Em vez disso, use o seguinte:
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value) {
    oci_bind_by_name($stid, $key, $myarray[$key]);
}
?>
]]>
     </programlisting>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_bind_array_by_name</function></member>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
