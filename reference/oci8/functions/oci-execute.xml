<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.oci-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_execute</refname>
  <refpurpose>Executa uma instrução</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_execute</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>OCI_COMMIT_ON_SUCCESS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Executa a instrução do parâmetro <parameter>statement</parameter> anteriormente retornada
   por <function>oci_parse</function>.
  </para>
  <para>
   Após a execução, instruções como <literal>INSERT</literal> terão
   os dados confirmados no banco de dados por padrão. Para instruções
   como <literal>SELECT</literal>, a execução executa a lógica da
   consulta. Os resultados da consulta podem ser posteriormente obtidos em PHP com
   funções como <function>oci_fetch_array</function>.
  </para>
  <para>
   Cada instrução analisada pode ser executada várias vezes, economizando o
   custo de nova análise. Isso é comumente usado
   para instruções <literal>INSERT</literal> quando os dados são vinculados
   com <function>oci_bind_by_name</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Um identificador de instrução OCI válido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
        Um segundo parâmetro opcional pode ser uma das seguintes constantes:
       <table>
        <title>Modos de execução</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Descrição</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_COMMIT_ON_SUCCESS</constant></entry>
           <entry>Confirma automaticamente todas as alterações pendentes para
            esta conexão quando a instrução for bem-sucedida. Este
            é o padrão.</entry>
          </row>
          <row>
           <entry><constant>OCI_DESCRIBE_ONLY</constant></entry>
           <entry>Disponibiliza metadados de consulta para funções
            como <function>oci_field_name</function>, mas não
            cria um conjunto de resultados. Qualquer chamada de busca subsequente,
            como <function>oci_fetch_array</function>,
            falhará.</entry>
          </row>
          <row>
           <entry><constant>OCI_NO_AUTO_COMMIT</constant></entry>
           <entry>Não confirma alterações automaticamente.</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
       O uso do modo <constant>OCI_NO_AUTO_COMMIT</constant> inicia ou continua uma
       transação. As transações são revertidas automaticamente quando
       a conexão é fechada ou quando o script termina. Explicitamente,
       chame <function>oci_commit</function> para confirmar uma transação,
       ou <function>oci_rollback</function> para abortá-la.
      </para>
      <para>
       Ao inserir ou atualizar dados, o uso de transações é
       recomendado para consistência de dados relacionais e por questões de
       desempenho.
      </para>
      <para>
       Se o modo <constant>OCI_NO_AUTO_COMMIT</constant> for usado para qualquer
       instrução, incluindo consultas, e
       <function>oci_commit</function>
       ou <function>oci_rollback</function> não for
       chamada posteriormente, o OCI8 executará uma reversão no final do
       script, mesmo que nenhum dado tenha sido alterado. Para evitar uma reversão
       desnecessária, muitos scripts não
       usam o modo <constant>OCI_NO_AUTO_COMMIT</constant> para consultas ou
       PL/SQL. Tenha cuidado para garantir a consistência transacional
       apropriada para a aplicação ao
       usar <function>oci_execute</function> com modos diferentes no
       mesmo script.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>oci_execute</function> para consultas</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplod de <function>oci_execute</function> sem especificar um modo</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de executar, crie a tabela:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');

oci_execute($stid); // A linha é confirmada e fica imediatamente visível para outros usuários

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de <function>oci_execute</function> com <constant>OCI_NO_AUTO_COMMIT</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de executar, crie a tabela:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $i, 10);
for ($i = 1; $i <= 5; ++$i) {
    oci_execute($stid, OCI_NO_AUTO_COMMIT);
}
oci_commit($conn);  // confirma todos os novos valores: 1, 2, 3, 4, 5

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de <function>oci_execute</function> com diferentes modos de confirmação</title>
    <programlisting role="php">
<![CDATA[
<?php

// Antes de executar, crie a tabela:
//   CREATE TABLE MYTABLE (col1 NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');
oci_execute($stid, OCI_NO_AUTO_COMMIT);  // dados não confirmados

$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (456)');
oci_execute($stid);  // confirma tanto 123 quanto 456

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo de <function>oci_execute</function> com
     <constant>OCI_DESCRIBE_ONLY</constant></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');

$stid = oci_parse($conn, 'SELECT * FROM locations');
oci_execute($s, OCI_DESCRIBE_ONLY);
for ($i = 1; $i <= oci_num_fields($stid); ++$i) {
    echo oci_field_name($stid, $i) . "<br>\n";
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    As transações são revertidas automaticamente quando as conexões são
    fechadas ou quando o script termina, o que ocorrer primeiro. Explicitamente
    chame <function>oci_commit</function> para confirmar uma transação.
   </para>
   <para>
    Qualquer chamada para <function>oci_execute</function> que utilize o modo
    <constant>OCI_COMMIT_ON_SUCCESS</constant> explicitamente ou por
    padrão confirmará qualquer transação anterior não confirmada.
   </para>
   <para>
    Qualquer instrução DDL do Oracle, como <literal>CREATE</literal>
    ou <literal>DROP</literal>, confirmará automaticamente qualquer
    transação não confirmada.
   </para>
  </note>
  <note>
   <para>
    Como a função <function>oci_execute</function> geralmente
    envia a instrução para o
    banco de dados, <function>oci_execute</function> pode identificar alguns
    erros de sintaxe de instrução que a função
    <function>oci_parse</function> (local e mais leve) não consegue.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
