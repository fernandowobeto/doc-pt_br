<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose><function>unset</function> remove a definição de uma variável informada</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> destrói as variáveis especificadas.
  </para>
  <para>
   O comportamento de <function>unset</function> dentro de uma função
   pode variar dependendo de qual tipo de variável está tentando-se
   destruir.
  </para>
  <para>
   Se uma variável global tornar-se indefinida por <function>unset</function> dentro de
   uma função, apenas a variável local é destruída. A variável no ambiente
   que chamou a função manterá o mesmo valor anterior à chamada a
   <function>unset</function>.
   <example>
    <title>Usando <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Para remover a definição de uma variável global usando <function>unset</function>
   dentro de uma função, use o array
   <varname>$GLOBALS</varname>:
   <example>
    <title><function>unset</function> com variável global</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "alguma coisa";
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Se uma variável que é PASSADA POR REFERÊNCIA tiver sua definição removida
   por <function>unset</function> dentro de uma função, apenas a variável local
   é destruída. A variável no ambiente que chamou a função
   manterá o mesmo valor anterior à chamada a
   <function>unset</function>.
   <example>
    <title><function>unset</function> com referência</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'alguma coisa';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Se uma variável estática tiver a definição removida por <function>unset</function> dentro de uma
   função, <function>unset</function> destrói a variável apenas no
   contexto do resto da função. Chamadas subsequentes à função irão restaurar
   o valor anterior da variável.
   <example>
    <title><function>unset</function> com variável estática</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Antes de unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "depois de unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       A variável que terá sua definição removida.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Mais variáveis que terão definições removidas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>unset</function></title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// destrói uma única variável
unset($foo);

// destrói um único elemento de um array
unset($bar['quux']);

// destrói mais de uma variável
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    É possível remover definições de propriedades de objeto visíveis no contexto atual.
   </para>
   <para>
     Se declarados,
     o método <link linkend="object.get">__get()</link>
     é chamado ao acessar uma propriedade indefinida, e
     o método <link linkend="object.set">__set()</link>
     é chamado ao definir uma propriedade indefinida.
   </para>
  </note>
  <note>
   <para>
    Não é possível remover a definição de <literal>$this</literal> dentro de um método
    do objeto.
   </para>
  </note>
  <note>
   <para>
    Ao usar <function>unset</function> em propriedades de objeto inacessíveis,
    o método de sobrecarga <link linkend="object.unset">__unset()</link>
    será chamado, caso esteja declarado.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">Conversão (unset)</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
