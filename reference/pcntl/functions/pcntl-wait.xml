<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.pcntl-wait" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_wait</refname>
  <refpurpose>Aguarda ou retorna o status de um filho bifurcado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_wait</methodname>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função wait suspende a execução do processo atual até que
   um filho tenha saído, ou até que um sinal seja entregue, cuja ação seja
   encerrar o processo atual ou chamar uma função de tratamento de sinais. Se um
   filho já tiver saído no momento da chamada (um processo chamado de "zumbi"),
   a função retorna imediatamente. Quaisquer recursos do sistema usados
   pelo filho são liberados. Consulte a página de manual wait(2) do sistema operacional para
   detalhes específicos sobre como wait funciona.
  </para>
  <note>
   <para>
    Esta função é equivalente a chamar <function>pcntl_waitpid</function>
    com um <literal>-1</literal> <parameter>process_id</parameter> e sem
    <parameter>flags</parameter>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_wait</function> armazenará informações de status
       no parâmetro <parameter>status</parameter>, que podem ser
       avaliadas usando as seguintes funções:
       <function>pcntl_wifexited</function>,
       <function>pcntl_wifstopped</function>,
       <function>pcntl_wifsignaled</function>,
       <function>pcntl_wexitstatus</function>,
       <function>pcntl_wtermsig</function> e
       <function>pcntl_wstopsig</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Se wait3 estiver disponível no sistema (principalmente sistemas no estilo BSD), pode
       ser fornecido o parâmetro opcional <parameter>flags</parameter>. Se este
       parâmetro não for fornecido, wait será usado para a chamada de sistema. Se
       wait3 não estiver disponível, fornecer um valor para <parameter>flags</parameter>
       não terá efeito. O valor de <parameter>flags</parameter>
       é uma operação <literal>OR</literal> de zero ou mais das duas
       constantes a seguir:
       <table>
        <title>Valores possíveis para <parameter>flags</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            Retorna imediatamente se nenhum processo filho tiver saído.
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
            Retorna para processos filhos que estão parados e cujos status não
            tenham sido reportados.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_wait</function> retorna o ID do processo
   filho que saiu, -1 em caso de erro ou zero se WNOHANG foi fornecido como uma
   opção (em sistemas que tenham wait3 disponível) e nenhum processo filho estava disponível.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
