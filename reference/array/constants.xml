<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: e50e79746736dbdfbabe9bd3566793b3ddf38f58 Maintainer: leonardolara Status: ready --><!-- CREDITS: felipe, fabioluciano, geekcom, airtonzanon, leonardolara -->
<appendix xml:id="array.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants.core;
 <para>
 <variablelist>
  <varlistentry xml:id="constant.case-lower">
   <term>
    <constant>CASE_LOWER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_LOWER</constant> é utilizada com a função
     <function>array_change_key_case</function> para converter
     chaves de arrays para minúsculas. É o valor padrão utilizado na função
     <function>array_change_key_case</function>. A partir do PHP 8.2.0, somente caracteres ASCII
     são convertidos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.case-upper">
   <term>
    <constant>CASE_UPPER</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>CASE_UPPER</constant> é utilizada com a função
     <function>array_change_key_case</function> para converter
     chaves de arrays para maiúsculas. A partir do PHP 8.2.0, somente caracteres ASCII
     são convertidos.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para>Opções de ordenação:
 <variablelist>
  <varlistentry xml:id="constant.sort-asc">
   <term>
    <constant>SORT_ASC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_ASC</constant> é utilizada com
     <function>array_multisort</function> para classificar em ordem crescente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-desc">
   <term>
    <constant>SORT_DESC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_DESC</constant> é utilizada com
     <function>array_multisort</function> para classificar em ordem decrescente.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para>Opções de tipos de ordenação: utilizadas por várias funções de ordenação
 <variablelist>
  <varlistentry xml:id="constant.sort-regular">
   <term>
    <constant>SORT_REGULAR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_REGULAR</constant> é utilizada para comparar itens normalmente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-numeric">
   <term>
    <constant>SORT_NUMERIC</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_NUMERIC</constant> é utilizada para comparar itens numericamente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-string">
   <term>
    <constant>SORT_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    <constant>SORT_STRING</constant> é utilizada para comparar itens como strings.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-locale-string">
   <term>
    <constant>SORT_LOCALE_STRING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    <constant>SORT_LOCALE_STRING</constant> é utilizada para comparar itens como
    strings, baseado na localidade atual.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-natural">
   <term>
    <constant>SORT_NATURAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
    <constant>SORT_NATURAL</constant> é utilizada para comparar itens como
    strings utilizando a "ordenação natural", como a função <function>natsort</function>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.sort-flag-case">
   <term>
    <constant>SORT_FLAG_CASE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>SORT_FLAG_CASE</constant> pode ser combinada (operador OR binário) com
     <constant>SORT_STRING</constant> ou <constant>SORT_NATURAL</constant> para
     ordenar strings de forma insensível a miúsculas/minúsculas. A partir do PHP 8.2.0, somente a redução de todas as letras ASCII a maiúsculas ou minúsculas
     será feita.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <para>Opções de filtro:
 <variablelist>
  <varlistentry xml:id="constant.array-filter-use-key">
   <term>
    <constant>ARRAY_FILTER_USE_KEY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_KEY</constant> é utilizada com a função
     <function>array_filter</function> para passar cada chave como primeiro argumento de uma função de retorno informada.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.array-filter-use-both">
   <term>
    <constant>ARRAY_FILTER_USE_BOTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     <constant>ARRAY_FILTER_USE_BOTH</constant> é utilizada com a função
     <function>array_filter</function> para passar chave e valor para a função de retorno informada.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>

 <variablelist>
  <varlistentry xml:id="constant.count-normal">
   <term>
    <constant>COUNT_NORMAL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.count-recursive">
   <term>
    <constant>COUNT_RECURSIVE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-overwrite">
   <term>
    <constant>EXTR_OVERWRITE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-skip">
   <term>
    <constant>EXTR_SKIP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-same">
   <term>
    <constant>EXTR_PREFIX_SAME</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-all">
   <term>
    <constant>EXTR_PREFIX_ALL</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-invalid">
   <term>
    <constant>EXTR_PREFIX_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-if-exists">
   <term>
    <constant>EXTR_PREFIX_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-if-exists">
   <term>
    <constant>EXTR_IF_EXISTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-refs">
   <term>
    <constant>EXTR_REFS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>

    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
