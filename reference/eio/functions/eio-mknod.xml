<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a4fe8cf4c7712c4af6d2b0dc2e3d7090f53f4e21 Maintainer: leonardolara Status: ready -->

<refentry xml:id="function.eio-mknod" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>eio_mknod</refname>
  <refpurpose>Cria arquivo normal ou especial</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>eio_mknod</methodname>
   <methodparam><type>string</type><parameter>path</parameter></methodparam>
   <methodparam><type>int</type><parameter>mode</parameter></methodparam>
   <methodparam><type>int</type><parameter>dev</parameter></methodparam>
   <methodparam
   choice="opt"><type>int</type><parameter>pri</parameter><initializer>EIO_PRI_DEFAULT</initializer></methodparam>
   <methodparam
   choice="opt"><type>callable</type><parameter>callback</parameter><initializer>NULL</initializer></methodparam>
   <methodparam
   choice="opt"><type>mixed</type><parameter>data</parameter><initializer>NULL</initializer></methodparam>

  </methodsynopsis>
  <para>
  <function>eio_mknod</function> cria arquivo normal ou (frequentemente) especial.
  </para>

  &warn.undocumented.func;

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>path</parameter></term>
    <listitem>
     <para>
      Caminho para o novo nó (arquivo).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>mode</parameter></term>
    <listitem>
     <para>
      Especifica as permissões a serem usadas e o tipo de nó a ser
      criado. Deve ser uma combinação (usando OR binário) de um dos
      tipos de arquivo listados abaixo e as permissões para o novo nó (por exemplo, 0640).

      Tipos de arquivo possíveis: <constant>EIO_S_IFREG</constant> (arquivo normal),
      <constant>EIO_S_IFCHR</constant> (arquivo de caracteres),
      <constant>EIO_S_IFBLK</constant> (arquivo especial de bloco),
      <constant>EIO_S_IFIFO</constant> (FIFO - pipe nomeado) e
      <constant>EIO_S_IFSOCK</constant> (soquete de domínio UNIX).

      Para especificar permissões, as constantes <emphasis>EIO_S_I*</emphasis> podem ser
      usadas.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dev</parameter></term>
    <listitem>
     <para>
      Se o tipo de arquivo for <constant>EIO_S_IFCHR</constant> ou
      <constant>EIO_S_IFBLK</constant>, este parâmetro especifica os números principais e
      secundários do arquivo especial de dispositivo recém-criado. Caso contrário,
      <parameter>dev</parameter> será ignorado. Veja a <emphasis>página de manual do mknod(2)
      para detalhes</emphasis>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>pri</parameter></term>
    <listitem>
    &eio.request.pri.values;
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
     &eio.callback.proto;
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>data</parameter></term>
    <listitem>
     <para>
      Variável arbitrária passada para <parameter>callback</parameter>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eio_mknod</function> retorna o recurso da requisição em caso de sucesso,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>eio_mknod</function></title>
   <programlisting role="php">
<![CDATA[

<?php
// Nome do FIFO
$temp_filename = "/tmp/eio-temp-fifo";

/* Função chamada quando eio_mknod() termina */
function my_mknod_callback($data, $result) {
    $s = stat($data);
    var_dump($s);

    if ($result == 0) {
        echo "eio_mknod_ok";
    }

    @unlink($data);
}

eio_mknod($temp_filename, EIO_S_IFIFO, 0,
    EIO_PRI_DEFAULT, "my_mknod_callback", $temp_filename);
eio_event_loop();
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(26) {
  [0]=>
  int(17)
  [1]=>
  int(2337608)
  [2]=>
  int(4096)
  [3]=>
  int(1)
  [4]=>
  int(1000)
  [5]=>
  int(100)
  [6]=>
  int(0)
  [7]=>
  int(0)
  [8]=>
  int(1318241261)
  [9]=>
  int(1318241261)
  [10]=>
  int(1318241261)
  [11]=>
  int(4096)
  [12]=>
  int(0)
  ["dev"]=>
  int(17)
  ["ino"]=>
  int(2337608)
  ["mode"]=>
  int(4096)
  ["nlink"]=>
  int(1)
  ["uid"]=>
  int(1000)
  ["gid"]=>
  int(100)
  ["rdev"]=>
  int(0)
  ["size"]=>
  int(0)
  ["atime"]=>
  int(1318241261)
  ["mtime"]=>
  int(1318241261)
  ["ctime"]=>
  int(1318241261)
  ["blksize"]=>
  int(4096)
  ["blocks"]=>
  int(0)
}
eio_mknod_ok
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>eio_open</function></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
