<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 539a9823a805ac29cab7fa4baf3ae3a28116a2f5 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.hash-pbkdf2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Gera uma derivação de chave PBKDF2 de uma senha fornecida</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>binary</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       Nome do algoritmo de hash selecionado (por exemplo, <literal>"sha256"</literal>).
       Para uma lista de algoritmos suportados, veja <function>hash_hmac_algos</function>.
       <note>
        <para>
         Funções de hash não criptográficas não são permitidas.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       A senha a ser usada para a derivação.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       O salt a ser usado para a derivação. Este valor deve ser gerado aleatoriamente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       O número de iterações internas a serem executadas para a derivação.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       O comprimento da string de saída. Se <parameter>binary</parameter>
       for &true; isso corresponde ao comprimento em bytes da chave derivada, se
       <parameter>binary</parameter> for &false; isso corresponde ao dobro do
       comprimento em bytes da chave derivada (pois cada byte da chave é retornado como
       dois caracteres hexadecimais).
      </para>
      <para>
       Se <literal>0</literal> for passado, toda a saída do algoritmo
       fornecido será usada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>binary</parameter></term>
     <listitem>
      <para>
       Quando definido como &true;, gera dados binários brutos. &false; gera caracteres
       hexadecimais minúsculos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Um array de opções para os vários algoritmos de hash.
       Atualmente, apenas a chave <literal>"seed"</literal> é
       suportada pelas variantes MurmurHash.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Retorna uma string contendo a chave derivada como hexadecimais minúsculos, a menos que
   <parameter>binary</parameter> esteja definido como &true;, nesse caso, a representação binária bruta
   da chave derivada é retornada.
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Lança uma exceção <classname>ValueError</classname> se o algoritmo for
   desconhecido, o parâmetro <parameter>iterations</parameter> for menor ou
   igual a <literal>0</literal>, o parâmetro <parameter>length</parameter> for menor
   que <literal>0</literal> ou o parâmetro <parameter>salt</parameter> for muito longo
   (maior que <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Agora lança uma exceção <classname>ValueError</classname> em caso de erro.
        Anteriormente, &false; era retornado e uma mensagem <constant>E_WARNING</constant>
        era emitida.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>O uso de funções de hash não criptográficas (adler32, crc32, crc32b, fnv132, fnv1a32, fnv164, fnv1a64, joaat) foi desabilitado.</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>hash_pbkdf2</function>, uso básico</title>
    <programlisting role="php">
<![CDATA[
<?php
$password = "password";
$iterations = 600000;

// Gera um salt aleatório criptograficamente seguro usando random_bytes()
$salt = random_bytes(16);

$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
var_dump($hash);

// para binário bruto, $length precisa ser reduzido pela metade para resultados equivalentes
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 10, true);
var_dump(bin2hex($hash));?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
string(20) "120fb6cffcf8b32c43e7"
string(20) "120fb6cffcf8b32c43e7"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    O método PBKDF2 pode ser usado para fazer hash de senhas para armazenamento. No entanto,
    deve ser notado que <function>password_hash</function> ou
    <function>crypt</function> com <constant>CRYPT_BLOWFISH</constant> são
    mais adequados para armazenamento de senhas.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_hash</function></member>
    <member><function>hash_hkdf</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
