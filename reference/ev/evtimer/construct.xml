<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="evtimer.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvTimer::__construct</refname>
  <refpurpose>Contrói objeto observador EvTimer</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier>
   <methodname>EvTimer::__construct</methodname>
   <methodparam>
    <type>float</type>
    <parameter>after</parameter>
   </methodparam>
   <methodparam>
    <type>float</type>
    <parameter>repeat</parameter>
   </methodparam>
   <methodparam>
    <type>callable</type>
    <parameter>callback</parameter>
   </methodparam>
   <methodparam
   choice="opt">
    <type>mixed</type>
    <parameter>data</parameter>
    <initializer>&null;</initializer>
   </methodparam>
   <methodparam
   choice="opt">
    <type>int</type>
    <parameter>priority</parameter>
    <initializer>0</initializer>
   </methodparam>
  </constructorsynopsis>
  <para>
   Contrói objeto observador EvTimer.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>after</parameter>
    </term>
    <listitem>
     <para>
      Configura o temporizador para disparar após
      <parameter>after</parameter>
      segundos.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>repeat</parameter>
    </term>
    <listitem>
     <para>
      Se este parâmetro for
      <literal>0.0</literal>,
      o temporizador será automaticamente parado quando o tempo limite for atingido.
      Se for positivo, será o intervalo em segundos no qual o temporizador será
      automaticamente configurado para disparar novamente, até ser parado manualmente.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>callback</parameter>
    </term>
    <listitem>
     <para>
      Consulte
      <link linkend="ev.watcher-callbacks">funções de retorno observadoras</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Dados personalizados associados com o observador.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>priority</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-pri">Prioridade de observadores</link>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>Temporizadores simples</title>
   <programlisting role="php">
<![CDATA[
<?php
// Cria e inicia o disparo do temporizador após 2 segundos
$w1 = new EvTimer(2, 0, function () {
    echo "2 segundos se passaram\n";
});

// Cria e inicia o disparo do temporizador após 2 segundos, repetindo a cada segundo
// até que seja parado manualmente
$w2 = new EvTimer(2, 1, function ($w) {
    echo "é chamado a cada segundo e disparado após 2 segundos\n";
    echo "iteração = ", Ev::iteration(), PHP_EOL;

    // Interrompe o observador após 5 iterações
    Ev::iteration() == 5 and $w->stop();
    // Interrompe o observador se outras chamadas causarem mais de 10 iterações
    Ev::iteration() >= 10 and $w->stop();
});

// Cria um temporizador parado. Ele ficará inativo até que seja iniciado manualmente
$w_stopped = EvTimer::createStopped(10, 5, function($w) {
    echo "Função de retorno de um temporizador criado no estado parado\n";

    // Interrompe o observador após 2 iterações
    Ev::iteration() >= 2 and $w->stop();
});

// Repete até que Ev::stop() seja chamado ou todos os observadores parem
Ev::run();

// Inicia e verifica se funciona
$w_stopped->start();
echo "Executa iteração única\n";
Ev::run(Ev::RUN_ONCE);

echo "Reinicia o segundo observador e tenta lidar com os mesmos eventos, mas sem bloquear\n";
$w2->again();
Ev::run(Ev::RUN_NOWAIT);

$w = new EvTimer(10, 0, function() {});
echo "Executando uma repetição bloqueante\n";
Ev::run();
echo "FIM\n";
?>
]]>
   </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
2 segundos se passaram
é chamado a cada segundo e disparado após 2 segundos
iteração = 1
é chamado a cada segundo e disparado após 2 segundos
iteração = 2
é chamado a cada segundo e disparado após 2 segundos
iteração = 3
é chamado a cada segundo e disparado após 2 segundos
iteração = 4
é chamado a cada segundo e disparado após 2 segundos
iteração = 5
Executa iteração única
Função de retorno de um temporizador criado no estado parado
Reinicia o segundo observador e tenta lidar com os mesmos eventos, mas sem bloquear
Executando uma repetição bloqueante
é chamado a cada segundo e disparado após 2 segundos
iteração = 8
é chamado a cada segundo e disparado após 2 segundos
iteração = 9
é chamado a cada segundo e disparado após 2 segundos
iteração = 10
FIM
]]>
  </screen>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>EvTimer::createStopped</methodname>
   </member>
   <member>
    <classname>EvPeriodic</classname>
   </member>
   <member>
    <link xlink:href="&url.ev.timer;">ev_timer - tempos limite relativos e opcionalmente repetitivos</link>
   </member>
   <member>
    <link xlink:href="&url.ev.timeouts;">Usando os limites de tempo com inteligência</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
