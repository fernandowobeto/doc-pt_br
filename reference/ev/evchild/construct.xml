<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f80105b4fc1196bd8d5fecb98d686b580b1ff65d Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="evchild.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvChild::__construct</refname>
  <refpurpose>Constrói o objeto observador EvChild</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier>
   <methodname>EvChild::__construct</methodname>
   <methodparam>
    <type>int</type>
    <parameter>pid</parameter>
   </methodparam>
   <methodparam>
    <type>bool</type>
    <parameter>trace</parameter>
   </methodparam>
   <methodparam>
    <type>callable</type>
    <parameter>callback</parameter>
   </methodparam>
   <methodparam
   choice="opt">
    <type>mixed</type>
    <parameter>data</parameter>
    <initializer>&null;</initializer>
   </methodparam>
   <methodparam
   choice="opt">
    <type>int</type>
    <parameter>priority</parameter>
    <initializer>0</initializer>
   </methodparam>
  </constructorsynopsis>
  <para>
   Constrói o
   objeto observador
   <classname>EvChild</classname>.
  </para>
  <para>
   Chama a função de retorno quando uma alteração de status para o processo de ID
   <parameter>pid</parameter>
   (ou qualquer
   <emphasis>PID</emphasis>
   se
   <parameter>pid</parameter>
   for
   <literal>0</literal>
   ) tiver sido recebida (uma alteração de status acontece quando o processo termina ou
   é fechado ou, quando
   <parameter>trace</parameter>
   for &true;, adicionalmente quando ele é parado ou continuado). Em outras palavras,
   quando o processo recebe
   um sinal
   <constant>SIGCHLD</constant>,
   <emphasis>Ev</emphasis>
   irá buscar o status de saída/espera para todos os filhos alterados/zumbis
   e chamar a função de retorno.
  </para>
  <para>
   É valido instalar om observador filho depois que um
   <classname>EvChild</classname>
   tenha saído mas antes que o laço de evento tenha iniciado sua próxima iteração. Por
   exemplo, primeiro chama-se
   <literal>fork</literal>,
   e então o novo processo filho poderia sair, e só depois um
   observador <classname>EvChild</classname>
   é instalado no pai para O
   novo
   <emphasis>PID</emphasis>.
  </para>
  <para>
   Pode-se acessar os estados de saída e rastreamento e o
   <parameter>pid</parameter>
   usando as propriedades
   <varname>rstatus</varname>
   e
   <varname>rpid</varname>
   do objeto observador.
  </para>
  <para>
   O número de
   <emphasis>PID</emphasis> observadores
   por
   <emphasis>PID</emphasis>
   é ilimitado. Todos eles serão chamados.
  </para>
  <para>
   O método
   <methodname>EvChild::createStopped</methodname>
   não inicia (ativa) o novo observador criado.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>pid</parameter>
    </term>
    <listitem>
     <para>
      Espera por alterações de status do PID do processo (ou qualquer processo se PID for
      especificado
      como
      <literal>0</literal>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>trace</parameter>
    </term>
    <listitem>
     <para>
      Se &false;, apenas ativa o observador quando o processo termina.
      Caso contrário (&true;), ativa adicionalmente o observador quando o processo é
      parado ou continuado.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>callback</parameter>
    </term>
    <listitem>
     <para>
      Consulte
      <link linkend="ev.watcher-callbacks">funções de
      retorno observadoras</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Dados personalizados associados com o observador.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>priority</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-pri">Prioridade de observadores</link>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>EvLoop::child</methodname>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
