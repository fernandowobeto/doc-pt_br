<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a8863b0123dc5348c91e67198b995222878a7e65 Maintainer: leonardolara Status: ready -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Busca a próxima linha de um resultado
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Busca uma linha de um resultado associado com um objeto PDOStatement object. O
   parâmetro <parameter>mode</parameter> determina como o PDO retorna
   a linha.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Controla como a próxima linha será retornada ao chamador. Este valor
       precisa ser uma das constantes <literal>PDO::FETCH_*</literal>,
       padronizado para o valor de <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>
       (cujo padrão é <literal>PDO::FETCH_BOTH</literal>).
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: retorna um array indexado pelo nome da
         coluna como retornada no resultado
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (padrão): retorna um array indexado tanto
         por nome de coluna quanto por número de coluna indexado em 0, como retornado no
         resultado
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>: retorna &true; e atribui os
         valores das colunas no conjunto de resultados às variáveis PHP às quais
         eles foram vinculados com o método
         <methodname>PDOStatement::bindColumn</methodname>
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>: retorna uma nova instância da classe
         solicitada. O objeto é inicializado mapeando as colunas do
         conjunto de resultados para propriedades na classe. Isso ocorre antes do
         construtor ser chamado, permitindo que as propriedades sejam preenchidas independentemente
         de sua visibilidade ou se estão marcadas como <literal>readonly</literal>.
         Se uma propriedade não existir na classe, o método mágico <link linkend="object.set">__set()</link>
         será invocado se existir; caso contrário, será criada uma propriedade
         pública dinâmica. Entretanto, quando <constant>PDO::FETCH_PROPS_LATE</constant>
         também é fornecido, o construtor é chamado <emphasis>antes</emphasis>
         de as propriedades serem preenchidas. Se <parameter>mode</parameter> incluir
         <constant>PDO::FETCH_CLASSTYPE</constant> (por exemplo,
         <literal>PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE</literal>), o nome
         da classe é determinado a partir do valor da primeira coluna.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal>: atualiza uma instância existente
         da classe solicitada, mapeando as colunas do conjunto de resultados às
         propriedades nomeadas na classe
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal>: combina
         <literal>PDO::FETCH_BOTH</literal> e <literal>PDO::FETCH_OBJ</literal>,
         e retorna um objeto <classname>PDORow</classname>
         que cria os nomes das propriedades do objeto conforme elas são acessadas.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal>: retorna um array com a mesma
         forma de <literal>PDO::FETCH_ASSOC</literal>, exceto que se houver
         múltiplas colunas com o mesmo nome, o valor referenciado pela
         chave será um array de todos os valores na linha que tiverem
         esse nome de coluna
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal>: retorna um array indexado por número de
         coluna como retornado no conjunto de resultados, iniciando na coluna 0
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal>: retorna um objeto anônimo com
         nomes de propriedades que correspondem ao nomes de colunas retornados no
         conjunto de resultados
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal>: quando usado com
         <literal>PDO::FETCH_CLASS</literal>, o construtor da classe é
         chamado antes que as propriedades sejam atribuídas com os respectivos
         valores das colunas.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Para um objeto PDOStatement representando um cursor navegável, este
       valor determina que linha será retornada ao chamador. Este valor
       precisa ser uma das constantes <literal>PDO::FETCH_ORI_*</literal>,
       sendo o padrão igual a <literal>PDO::FETCH_ORI_NEXT</literal>. Para requisitar um
       cursor navegável para o objeto PDOStatement, o atributo
       <literal>PDO::ATTR_CURSOR</literal> precisa ser definido para
       <literal>PDO::CURSOR_SCROLL</literal> ao preparar a instrução
       SQL com <methodname>PDO::prepare</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para>
       Para um objeto PDOStatement representando um cursor navegável para o qual
       o parâmetro <parameter>cursorOrientation</parameter> esteja definido para
       <literal>PDO::FETCH_ORI_ABS</literal>, este valor especifica o
       número absoluto da linha no conjunto de resultados que deve ser buscada.
      </para>
      <para>
       Para um objeto PDOStatement representando um cursor navegável para o qual
       o parâmetro <parameter>cursorOrientation</parameter> esteja definido para
       <literal>PDO::FETCH_ORI_REL</literal>, este valor especifica a
       linha a ser buscada relativa à posição do cursor antes do método
       <methodname>PDOStatement::fetch</methodname> ser chamado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   O valor de retorno desta função em caso de sucesso depende do tipo de busca. Em
   todos os casos, &false; é retornado em caso de falha ou se não houver mais linhas.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Buscando linhas usando estilos de busca diferentes</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Exercita estilos de PDOStatement::fetch */
print "PDO::FETCH_ASSOC: ";
print "Retorna a próxima linha como um array indexado por nome de coluna\n";
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print "\n";

print "PDO::FETCH_BOTH: ";
print "Retorna a próxima linha como um array indexado por nome de coluna e número\n";
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY: ";
print "Retorna a próxima linha como um objeto PDORow com nomes de colunas como propriedades\n";
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print "\n";

print "PDO::FETCH_OBJ: ";
print "Retorna a próxima linha como um objeto anônimo com nomes de coluna como propriedades\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Retorna a próxima linha como um array indexado por nome de coluna
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Retorna a próxima linha como um array indexado por nome de coluna e número
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Retorna a próxima linha como um objeto PDORow com nomes de colunas como propriedades
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Retorna a próxima linha como um objeto anônimo com nomes de coluna como propriedades
kiwi
]]>
    </screen>
   </example>
   <example><title>Buscando linhas com um cursor navegável</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Lendo para a frente:\n";
readDataForwards($conn);

print "Lendo para trás:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Reading forwards:
21    10    5
16    0     5
19    20    10

Reading backwards:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

   <example><title>Ordem de construção</title>
    <simpara>
     Quando objetos são buscados através de <constant>PDO::FETCH_CLASS</constant>, as propriedades
     do objeto são atribuídas primeiro, e depois o construtor da classe é
     invocado. Entretanto, quando <constant>PDO::FETCH_PROPS_LATE</constant> também for informada,
     esta ordem é revertida, isto, é, primeiro o construtor é chamado, e
     depois as propriedades são atribuídas.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Eu sou {$this->name}.\n";
        } else {
            echo "Eu não tenho um nome ainda.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Eu sou Alice.
Eu sou Alice.
Eu não tenho um nome ainda.
Eu sou Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
