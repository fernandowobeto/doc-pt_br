<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: leonardolara Status: ready -->
<refentry xml:id="pdostatement.closecursor" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>
   Fecha o cursor, permitindo que a instrução seja executada novamente
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>

  <para>
   <methodname>PDOStatement::closeCursor</methodname> libera a conexão
   ao servidor de forma que outras instruções SQL possam ser emitidas, mas deixa a
   instrução em um estado que permite que ela seja executada novamente.
  </para>
  <para>
   Este método é útil para drivers de banco de dados que não suportam a execução de
   um objeto PDOStatement quando um object PDOStatement executado anteriormente ainda
   tem registros não recebidos. Se o driver do banco de dados sofrer desta limitação,
   o problema pode se manifestar em um erro de "fora-de-sequência".
  </para>
  <para>
   <methodname>PDOStatement::closeCursor</methodname> é implementado como um
   método opcional específico do driver (permitindo máxima eficiência), ou como
   o método PDO genérico se nenhuma função específica do driver estiver instalada.
   O método PDO genérico é semanticamente o mesmo que escrever o seguinte código no
   script PHP:
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
?>
]]>
   </programlisting>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <methodname>PDOStatement::closeCursor</methodname></title>
    <para>
     No exemplo a seguire, o objeto PDOStatement <varname>$stmt</varname>
     retorna múltiplos registros mas a aplicação busca apenas a primeira
     linha, deixando o objeto PDOStatement em um estado com linhas não recebidas.
     Para assegurar que a aplicação irá funcionar com todos os drivers de banco de dados, o
     autor insere uma chamada a <methodname>PDOStatement::closeCursor</methodname>
     na variável <varname>$stmt</varname> antes de executar o objeto
     PDOStatement <varname>$otherStmt</varname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Cria um objeto PDOStatement */
$stmt = $dbh->prepare('SELECT foo FROM bar');

/* Cria um segundo objeto PDOStatement */
$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');

/* Executa a primeira instrução */
$stmt->execute();

/* Busca somente a primeira linha do resultado */
$stmt->fetch();

/* A chamada a closeCursor() pode ser requerida por alguns drivers */
$stmt->closeCursor();

/* Agora pode-se executar a segunda instrução */
$otherStmt->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
