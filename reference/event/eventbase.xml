<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: leonardolara Status: ready --><!-- CREDITS: fernandowobeto, leonardolara -->
<reference xml:id="class.eventbase" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>A classe EventBase</title>
 <titleabbrev>EventBase</titleabbrev>
 <partintro>
<!-- {{{ EventBase intro -->
  <section xml:id="eventbase.intro">
   &reftitle.intro;
   <para>
    A classe <classname>EventBase</classname>
    representa a estrutura base de eventos do libevent. Ele contém um conjunto de eventos
    e pode pesquisar para determinar quais eventos estão ativos.
   </para>
   <para>
    Cada base de eventos tem um
    <emphasis>método</emphasis>,
    ou um
    <emphasis>back-end</emphasis>
    que usa para determinar quais eventos estão prontos. Os métodos reconhecidos
    são:
    <literal>select</literal>,
    <literal>poll</literal>,
    <literal>epoll</literal>,
    <literal>kqueue</literal>,
    <literal>devpoll</literal>,
    <literal>evport</literal>
    e
    <literal>win32</literal>.
   </para>
   <para>
    Para configurar a base de eventos a ser usada ou evitar um back-end específico,
    a classe <classname>EventConfig</classname>
    pode ser usada.
   </para>
   <warning xml:id="eventbase.object-dtor-warning">
    <para>
     <emphasis>NÃO</emphasis>
     destrua o
     objeto
     <classname>EventBase</classname>
     enquanto os recursos dos objetos
     <literal>Event</literal>
     associados não forem liberados. Caso contrário, isso levará a resultados
     imprevisíveis!
    </para>
   </warning>
  </section>
<!-- }}} -->
  <section xml:id="eventbase.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBase</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>EventBase</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.loop-once">EventBase::LOOP_ONCE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.loop-nonblock">EventBase::LOOP_NONBLOCK</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.nolock">EventBase::NOLOCK</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.startup-iocp">EventBase::STARTUP_IOCP</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.no-cache-time">EventBase::NO_CACHE_TIME</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbase.constants.epoll-use-changelist">EventBase::EPOLL_USE_CHANGELIST</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbase')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBase constants -->
  <section xml:id="eventbase.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbase.constants.loop-once">
     <term>
      <constant>EventBase::LOOP_ONCE</constant>
     </term>
     <listitem>
      <para>
       Opção usada com o método
       <methodname>EventBase::loop</methodname>
       que significa: "bloquear até que libevent tenha um evento ativo e então
       sair quando todos os eventos ativos tiverem suas funções de retorno executadas".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.loop-nonblock">
     <term>
      <constant>EventBase::LOOP_NONBLOCK</constant>
     </term>
     <listitem>
      <para>
       Opção usada com o método
       <methodname>EventBase::loop</methodname>
       que significa: "não bloquear: veja quais eventos estão prontos agora, execute
       as funções de retorno de maior prioridade e depois saia".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.nolock">
     <term>
      <constant>EventBase::NOLOCK</constant>
     </term>
     <listitem>
      <para>
       Opção de configuração. Não aloque um bloqueio para a base de eventos, mesmo que
       se tenha um bloqueio configurado".
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.startup-iocp">
     <term>
      <constant>EventBase::STARTUP_IOCP</constant>
     </term>
     <listitem>
      <para>
       Opção de configuração somente do Windows. Ativa o despachante IOCP na
       inicialização.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.no-cache-time">
     <term>
      <constant>EventBase::NO_CACHE_TIME</constant>
     </term>
     <listitem>
      <para>
       Opção de configuração. Em vez de verificar o horário atual sempre que o laço de
       eventos estiver pronto para executar funções de retorno de tempo limite, verifica após cada
       função de retorno de tempo limite.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbase.constants.epoll-use-changelist">
     <term>
      <constant>EventBase::EPOLL_USE_CHANGELIST</constant>
     </term>
     <listitem>
      <para>
       Se estivermos usando o
       back-end <literal>epoll</literal>,
       este sinalizador diz que é seguro usar o código interno da lista de
       alterações do Libevent para agrupar adições e exclusões, a fim de tentar fazer o
       menor número possível de chamadas de sistema.
      </para>
      <para>
       Definir esta opção pode tornar o código executado mais rápido, mas pode desencadear um problema do Linux:
       não é seguro usar este sinalizador se houver algum descritor de arquivo clonado por
       dup() ou suas variantes. Fazer isso produzirá problemas estranhos e
       difíceis de diagnosticar.
      </para>
      <para>
       Esta opção também pode ser ativada configurando a
       variável de ambiente
       <literal>EVENT_EPOLL_USE_CHANGELIST</literal>.
      </para>
      <para>
       Esta opção não tem efeito se for usado um back-end
       diferente de <literal>epoll</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbase;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
