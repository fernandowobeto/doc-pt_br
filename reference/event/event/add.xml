<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a916b9bd3dd9db2137f65b7efd571c593c093b2f Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="event.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Event::add</refname>
  <refpurpose>Torna o evento pendente</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <type>bool</type>
   <methodname>Event::add</methodname>
   <methodparam choice="opt">
    <type>float</type>
    <parameter>timeout</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Marca o evento como pendente. Eventos não pendentes nunca ocorrerão, e a função de retorno
   do evento nunca será chamada. Em conjunto com
   <methodname>Event::del</methodname>,
   um evento pode ser reprogramado pelo usuário a qualquer momento.
  </para>
  <para>
   Se
   <methodname>Event::add</methodname>
   for chamado em um evento já pendente, a libevent o deixará pendente e
   o reagendará com o tempo limite fornecido (se especificado). Se, nesse caso,
   o tempo limite não for especificado,
   <methodname>Event::add</methodname>
   não terá efeito.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>timeout</parameter>
    </term>
    <listitem>
     <para>
      Tempo limite em segundos.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Adicionando um sinal personalizado</title>
   <programlisting role="php">
    <![CDATA[
<?php
/*
Inicie-o em uma janela de terminal:

$ php examples/signal.php

Em outra janela de terminal, descubra o PID e envie SIGTERM, por exemplo:

$ ps aux | grep examp
ruslan    3976  0.2  0.0 139896 11256 pts/1    S+   10:25   0:00 php examples/signal.php
ruslan    3978  0.0  0.0   9572   864 pts/2    S+   10:26   0:00 grep --color=auto examp
$ kill -TERM 3976

Na primeira janela do terminal o resultado será:

Caught signal 15
*/
class MyEventSignal {
    private $base, $ev;

    public function __construct($base) {
        $this->base = $base;
        $this->ev = Event::signal($base, SIGTERM, array($this, 'eventSighandler'));
        $this->ev->add();
    }

    public function eventSighandler($no, $c) {
        echo "Caught signal $no\n";
        $this->base->exit();
    }
}

$base = new EventBase();
$c    = new MyEventSignal($base);

$base->loop();
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Caught signal 15
]]>
   </screen>
  </example>

  <example>
   <title>Adicionando um temporizador</title>
   <programlisting role="php">
    <![CDATA[
<?php
$base = new EventBase();
$n = 2;
$e = Event::timer($base, function($n) use (&$e) {
    echo "$n segundos decorridos\n";
    $e->delTimer();
}, $n);
$e->add($n);
$base->loop();
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
    <![CDATA[
2 segundos decorridos
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Event::add</methodname></member>
   <member><methodname>Event::del</methodname></member>
   <member><methodname>Event::signal</methodname></member>
   <member><methodname>Event::timer</methodname></member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
