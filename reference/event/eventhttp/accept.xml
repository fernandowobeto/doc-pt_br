<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="eventhttp.accept" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EventHttp::accept</refname>
  <refpurpose>Faz com que um servidor HTTP aceite conexões no recurso ou fluxo de soquete especificado</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <type>bool</type>
   <methodname>EventHttp::accept</methodname>
   <methodparam>
    <type>mixed</type>
    <parameter>socket</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Faz um servidor HTTP aceitar conexões no recurso ou fluxo de soquete especificado.
   O soquete deve estar pronto para aceitar conexões.
  </para>
  <para>
   Pode ser chamado várias vezes para aceitar conexões em soquetes diferentes.
  </para>
  <note>
   <para>
    Para vincular um soquete, com conexões
    <literal>listen</literal>
    e
    <literal>
    accept</literal>
    em uma única chamada, use
    <methodname>EventHttp::bind</methodname>.
    <methodname>EventHttp::accept</methodname>
    é necessário somente se já houver um soquete pronto para aceitar conexões.
   </para>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>socket</parameter>
    </term>
    <listitem>
     <para>
      Recurso de soquete, fluxo ou descritor numérico de arquivo que representa um soquete
      pronto para aceitar conexões.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Exemplo de <function>EventHttp::accept</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$base = new EventBase();
$http = new EventHttp($base);

$addresses = array (
     8091 => "127.0.0.1",
     8092 => "127.0.0.2",
);
$i = 0;

$socket = array();

foreach ($addresses as $port => $ip) {
    echo $ip, " ", $port, PHP_EOL;
    $socket[$i] = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
    if (!socket_bind($socket[$i], $ip, $port)) {
        exit("socket_bind falhou\n");
    }
    socket_listen($socket[$i], 0);
    socket_set_nonblock($socket[$i]);

    if (!$http->accept($socket[$i])) {
        echo "Accept falhou\n";
        exit(1);
    }

    ++$i;
}

$http->setCallback("/some-page", function() {
 echo "(some-page)\n";
    echo "URI: ", $req->getUri(), PHP_EOL;
    $req->sendReply(200, "OK");
    echo "OK\n";
});

$http->setDefaultCallback(function($req) {
    echo "URI: ", $req->getUri(), PHP_EOL;
    $req->sendReply(200, "OK");
    echo "OK\n";
});

$signal = Event::signal($base, SIGINT, function () use ($base) {
    echo "Capturado SIGINT. Parando...\n";
    $base->stop();
});
$signal->add();

$base->dispatch();
echo "FIM\n";
// Não fechamos os sockets, pois o Libevent já define os
// sinalizadores CLOSE_ON_FREE e CLOSE_ON_EXEC no descritor
// de arquivo associado aos sockets.
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Client:
$ nc 127.0.0.1 8091
GET /about HTTP/1.0
Connection: close

HTTP/1.0 200 OK
Content-Type: text/html; charset=ISO-8859-1
Connection: close

Server:
127.0.0.1 8091
127.0.0.2 8092
URI: /about
OK
]]>
   </screen>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>EventHttp::bind</methodname>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
