<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 73fae4ee51b644b72028e610abefefced57c18ad Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="function.cubrid-connect-with-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_connect_with_url</refname>
  <refpurpose>Prepara o ambiente para conexão ao servidor CUBRID</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_connect_with_url</methodname>
   <methodparam><type>string</type><parameter>conn_url</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>new_link</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   A função <function>cubrid_connect_with_url</function> é usada para
   estabelecer o ambiente para conexão ao servidor usando
   informação passada por um argumento URL no formato string. Se o recurso HA estiver
   habilitado no CUBRID, é necessário especificar a informação de conexão do
   servidor reserva, que é usado em caso de falha, na string do
   argumento de URL desta função. Se o usuário e a senha não forem
   informados, a conexão "PUBLIC" será realizada por padrão.
  </para>
  <para>
   &lt;url&gt; ::= CUBRID:&lt;host&gt;:&lt;db_name&gt;:&lt;db_user&gt;:&lt;db_password&gt;:[?&lt;properties&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= &lt;property&gt; [&amp;&lt;property&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= alhosts=&lt;alternative_hosts&gt;[ &amp;rctime=&lt;time&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= login_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= query_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= disconnect_on_query_timeout=true|false
  </para>
  <para>
   &lt;alternative_hosts&gt; ::= &lt;standby_broker1_host&gt;:&lt;port&gt; [,&lt;standby_broker2_host&gt;:&lt;port&gt;]
  </para>
  <para>
   &lt;host&gt; := HOSTNAME | IP_ADDR
  </para>
  <para>
   &lt;time&gt; := SECOND
  </para>
  <para>
   &lt;milli_sec&gt; := MILLI SECOND
  </para>
  <para>
   <simplelist>
    <member>host : Nome do servidor ou endereço IP do banco de dados mestre</member>
    <member>db_name : Nome do banco de dados</member>
    <member>db_user : Nome de usuário do banco de dados</member>
    <member>db_password : Senha de usuário do banco de dados</member>
    <member>
     alhosts : Especifica as informações do mediador do servidor reserva, que são
     usadas em caso de falha quando for impossível conectar-se ao servidor ativo.
     Pode-se especificar vários mediadores para casos de falha e a tentativa de conexão ao mediadores
     é realizada na ordem listada em "alhosts"</member>
    <member>
     rctime : Um intervalo entre as tentativas de conexão ao mediador ativo no
     qual ocorreu a falha. Após ocorrer uma falha, o sistema se conecta ao
     mediador especificado por "althosts", encerra a transação e, em seguida,
     tenta se conectar ao mediador ativo do banco de dados mestre a cada "rctime".
     O valor padrão é 600 segundos.</member>
    <member>
     login_timeout : Tempo limite (unidade: milissegundos) para se registrar no banco de dados. O padrão
     é 0, que significa infinito.
    </member>
    <member>
     query_timeout : Tempo limite (unidade: milissegundos) para requisição de consulta. Quando o limite é atingido,
     é enviada uma mensagem para cancelamento de requisição da consulta transferida ao servidor. O valor de retorno
     vai depender da configuração disconnect_on_query_timeout; embora a
     mensagem para cancelar a requisição seja enviada ao servidor, a requisição poderá ser bem sucedida.
    </member>
    <member>
     disconnect_on_query_timeout : Configura um valor para retornar imediatamente um erro
     de função sendo executada após o tempo limite. O padrão é "false".
    </member>
   </simplelist>
  </para>
  <note>
   <para>
    <literal>?</literal> e <literal>:</literal> são usados como identificadores
    na URL de conexão do PHP e não podem ser incluídos na senha. O exemplo a seguir
    é uma senha inválida para URL de conexão por conter
    "<literal>?:</literal>".
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100";
   </para>
   <para>
    Senhas que contêm <literal>?</literal> ou <literal>:</literal>
    podem ser passadas como parâmetro separado.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tbd:::?login_timeout=100";
   </para>
   <para>
    $conn = cubrid_connect_with_url($url, "dba", "12?");
   </para>
   <para>
    Se o usuário ou a senha estiverem vazios, o caractere "<literal>:</literal>" não pode ser omitido,
    veja este exemplo:
   </para>
   <para>
    $url = "CUBRID:localhost:33000:demodb:::";
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_url</parameter></term>
     <listitem><para>Uma string contendo informação de conexão ao servidor.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem><para>Nome de usuário para o banco de dados.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem><para>Senha do usuário.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>new_link</parameter></term>
     <listitem><para>Se uma segunda chamada for feita a
     <function>cubrid_connect_with_url</function> com os mesmos argumentos,
     nenhuma nova conexão será estabelecida, mas em vez disso, o identificador
     da conexão já aberta será retornado. O parâmetro
     <parameter>new_link</parameter> modifica este comportamento e
     faz com que <function>cubrid_connect_with_url</function> sempre abra uma nova
     conexão, mesmo que <function>cubrid_connect_with_url</function> tenha
     sido chamada antes com os mesmos parâmetros.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identificador da conexão em caso de sucesso,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>cubrid_connect_with_url</function> e URL sem propriedades</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:localhost:33000:demodb:dba::";
$con = cubrid_connect_with_url($conn_url);

if ($con) {
    echo "conectado com sucesso";
    cubrid_execute($con, "create table person(id int,name char(16))");
    $req =cubrid_execute($con, "insert into person values(1,'James')");

    if ($req) {
        cubrid_close_request($req);
        cubrid_commit($con);
    } else {
        cubrid_rollback($con);
    }
    cubrid_disconnect($con);
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exemplo de <function>cubrid_connect_with_url</function> e URL com propriedades</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba::?login_timeout=100";
$con = cubrid_connect_with_url ($conn_url);

if ($con) {
    echo "conectado com sucesso";
    cubrid_execute($con, "create table person(id int,name char(16))");
    $req =cubrid_execute($con, "insert into person values(1,'James')");

    if ($req) {
        cubrid_close_request($req);
        cubrid_commit($con);
    } else {
        cubrid_rollback($con);
    }
    cubrid_disconnect($con);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_pconnect</function></member>
    <member><function>cubrid_pconnect_with_url</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
