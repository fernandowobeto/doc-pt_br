<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b694084174d9bb9432d5ae0d405e43482e6cfb67 Maintainer: leonardolara Status: ready -->

<refentry xml:id="pool.submitTo" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Pool::submitTo</refname>
  <refpurpose>Envia uma tarefa a um trabalhador específico para execução</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>int</type><methodname>Pool::submitTo</methodname>
   <methodparam><type>int</type><parameter>worker</parameter></methodparam>
   <methodparam><type>Threaded</type><parameter>task</parameter></methodparam>
  </methodsynopsis>
  <para>
   Envia uma tarefa para o trabalhador especificado no pool. Os trabalhadores são indexados
   a partir de 0 e só existirão se o pool precisar criá-los (já que
   as threads são geradas lentamente).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>worker</parameter></term>
    <listitem>
     <para>
      O trabalhador para o qual a tarefa será enviada, indexado em <literal>0</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>task</parameter></term>
    <listitem>
     <para>
      A tarefa para execução.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   O identificador do trabalhador que aceitou a tarefa.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Enviar tarefas para um trabalhador específico</title>
    <programlisting role="php">
<![CDATA[
<?php
class Task extends Threaded {
    public function run() {
        var_dump(Thread::getCurrentThreadID());
    }
}

$pool = new Pool(2);

$pool->submit(new Task());

for ($i = 0; $i < 5; ++$i) {
    $pool->submitTo(0, new Task()); // empilha todas as tarefas no primeiro trabalhador
}

$pool->submitTo(1, new Task()); // não é possível empilhar a tarefa no segundo trabalhador porque ele ainda não existe

$pool->shutdown();
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(4475011072)
int(4475011072)
int(4475011072)
int(4475011072)
int(4475011072)
int(4475011072)

Fatal error: Uncaught Exception: The selected worker (1) does not exist in %s:%d
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
