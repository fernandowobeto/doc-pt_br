<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<!-- State: experimental -->

<book xml:id="book.parle" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="pecl" ?>
 <title>Análise sintática e léxixa</title>
 <titleabbrev>Parle</titleabbrev>

 <preface xml:id="intro.parle">
  &reftitle.intro;
  <para>
   &warn.experimental;
   A extensão Parle fornece recursos gerais de análise sintática e léxica. A implementação é baseada <link xlink:href="&url.parle.lib;">nestas bibliotecas</link> e requer um compilador compatível com <link xlink:href="&url.c14;">C++14</link>. O analisador léxico é baseado na correspondência de expressões regulares, e o analisador sintático é LALR(1). Analisadores sintáticos e léxicos são gerados dinamicamente e podem ser usados ​​imediatamente após sua finalização. Parle lida com análise sintática e léxica, e a representação e o processamento apropriados das estruturas de dados são tarefa do implementador. A serialização e a geração de código ainda não são suportadas pela extensão.
  </para>
  <para>
   A análise léxica é o processo de divisão de uma sequência de caracteres em uma lista de lexemas. A lista de lexemas pode então ser usada para análise sintática em relação a uma gramática formal. Essas operações também são conhecidas como análise léxica e interpretação. Esta documentação não pretende fornecer informações exaustivas sobre análise léxica e interpretação. Boas fontes de informações a esse respeito estão disponíveis em diversos recursos na rede. Vários exemplos de uso foram incluídos para demonstrar a funcionalidade. A extensão é útil para programadores PHP que desejam aprender ou utilizar análise sintática e interpretação. Máquinas de estado e análise gramatical não precisam ser implementadas manualmente; essas tarefas complexas são eliminadas pelo Parle. Graças a isso, o desenvolvimento pode ser focado na resolução real do problema.
  </para>
  <para>
   O caso de uso comum para Parle é quando um formato de dados é muito complexo para ser manipulado pela expressão regular correspondente com PCRE. A aplicação prática é ampla, seja para um formato de dados específico, uma modificação de comportamento de funções existentes, até mesmo uma linguagem de programação própria e muito mais. Métodos auxiliares como <methodname>Parle\Lexer::dump</methodname> para inspecionar a máquina de estados gerada, ou <methodname>Parle\Parser::dump</methodname> para inspecionar a gramática gerada, são úteis. O método <methodname>Parle\Parser::trace</methodname> também pode ser usado para rastrear a operação de análise sintática.
  </para>
 </preface>

 &reference.parle.setup;
 &reference.parle.constants;
 &reference.parle.pattern.matching;
 &reference.parle.examples;
 &reference.parle.parle.lexer;
 &reference.parle.parle.rlexer;
 &reference.parle.parle.parser;
 &reference.parle.parle.rparser;
 &reference.parle.parle.stack;
 &reference.parle.parle.token;
 &reference.parle.parle.errorinfo;
 &reference.parle.parle.lexerexception;
 &reference.parle.parle.parserexception;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
