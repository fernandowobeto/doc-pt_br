<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 505ee6ad7881f1d6999752a20008eb9134e0fdd8 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<appendix xml:id="xpass.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;

 <simpara>
  A extensão Xpass fornece vários conjuntos de constantes.
  Métodos de hash (<constant>CRYPT_PREFIX_<replaceable>*</replaceable></constant>) para
  o parâmetro 'prefix' de <function>crypt_gensalt</function>.
  Códigos de erro (<constant>CRYPT_SALT_<replaceable>*</replaceable></constant>) retornados por
  <function>crypt_checksalt</function>.
  Algoritmos de senha (<constant>PASSWORD_<replaceable>*</replaceable></constant>) para
  o parâmetro 'algo' de <function>password_hash</function>.
 </simpara>

 <variablelist xml:id="xpass.constants.algo">
  <title>Métodos de hash</title>
  <varlistentry xml:id="constant.crypt-prefix-std-des">
   <term>
    <constant>CRYPT_PREFIX_STD_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     O método de hash original do Unix V7, baseado na cifra de bloco DES.
     Como o DES não é custoso em equipamentos modernos,
     já que existem apenas <literal>4096</literal> salts possíveis e 2**56 frases-senha distintas,
     que ele trunca para 8 caracteres,
     é possível descobrir qualquer frase-senha com hash usando este método.
     Ele só deve ser usado ao oferecer suporte a sistemas operacionais antigos que não suportam
     nenhum outro algoritmo de geração de hash, devido à fragilidade dos hashes DES.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-ext-des">
   <term>
    <constant>CRYPT_PREFIX_EXT_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Uma extensão do DES tradicional, que elimina o limite de comprimento,
     aumenta o tamanho do salt e torna o custo de tempo ajustável.
     Ele se originou com o BSDI BSD/OS e também está disponível pelo menos no NetBSD,
     OpenBSD e FreeBSD devido ao uso da biblioteca FreeSec de David Burren.
     É muito melhor que o DES tradicional e o bigcrypt,
     mas ainda não deve ser usado para novos hashes.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-md5">
   <term>
    <constant>CRYPT_PREFIX_MD5</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Um hash baseado no algoritmo MD5, originalmente desenvolvido por Poul-Henning Kamp para o FreeBSD.
     Suportado na maioria dos Unixes livres e versões mais recentes do Solaris.
     Não tão fraco quanto os hashes baseados em DES abaixo,
     mas o MD5 é tão leve em equipamentos modernos que não deve ser usado para novos hashes.
     O custo de processamento não é ajustável.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-blowfish">
   <term>
    <constant>CRYPT_PREFIX_BLOWFISH</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Um hash baseado na cifra de bloco Blowfish, modificado para ter um agendamento de chaves mais custoso.
     Originalmente desenvolvido por Niels Provos e David Mazieres para o OpenBSD e também suportado em versões recentes
     do FreeBSD e NetBSD, no Solaris 10 e mais recentes, e em diversas distribuições GNU/*/Linux.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha256">
   <term>
    <constant>CRYPT_PREFIX_SHA256</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Um hash baseado em SHA-2 com saída de 256 bits, originalmente desenvolvido por Ulrich Drepper para a libc GNU.
     Suportado no Linux, mas incomum em outros lugares.
     Aceitável para novos hashes.
     O parâmetro de custo de processamento padrão é <literal>5000</literal>,
     o que é muito baixo para equipamentos modernos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha512">
   <term>
    <constant>CRYPT_PREFIX_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Um hash baseado em SHA-2 com saída de 512 bits, originalmente desenvolvido por Ulrich Drepper para a libc GNU.
     Suportado no Linux, mas incomum em outros lugares.
     Aceitável para novos hashes.
     O parâmetro de custo de processamento padrão é <literal>5000</literal>,
     o que é muito baixo para equipamentos modernos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-scrypt">
   <term>
    <constant>CRYPT_PREFIX_SCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Scrypt é uma função de derivação de chaves baseada em senhas criada por Colin Percival,
     originalmente para o serviço de backup online Tarsnap.
     O algoritmo foi projetado especificamente para tornar custosa a execução
     de ataques de hardware personalizados em larga escala, exigindo grandes quantidades de memória.
     Em 2016, o algoritmo scrypt foi publicado pela IETF como RFC 7914.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-gost-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_GOST_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Gost-yescrypt utiliza a saída de yescrypt como uma mensagem de entrada para o HMAC com a
     função de hash GOST R 34.11-2012 (Streebog) com um resumo de 256 bits.
     Assim, as propriedades criptográficas de yescrypt são substituídas pelas da função de hash GOST.
     Este método de hash é útil em aplicações que necessitam de hash de senha moderna,
     mas que dependem de algoritmos GOST.
     A função de hash GOST R 34.11-2012 (Streebog) foi publicada pela IETF como RFC 6986.
     Aceitável para novos hashes, quando necessário.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Yescrypt é um esquema de hash de senha escalável desenvolvido pela Solar Designer,
     baseado no scrypt de Colin Percival.
     Embora a força do yescrypt contra ataques de adivinhação de senha venha do projeto do seu algoritmo,
     sua segurança criptográfica é garantida pelo uso de SHA-256 na camada externa.
     A função de hash SHA-256 foi publicada pelo NIST na FIPS PUB 180-2
     (e suas revisões subsequentes, como a FIPS PUB 180-4) e pela IETF como RFC 4634
     (e posteriormente RFC 6234).
     Recomendado para novos hashes.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.error">
  <title>Códigos de erro</title>
  <varlistentry xml:id="constant.crypt-salt-ok">
   <term>
    <constant>CRYPT_SALT_OK</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Nenhum erro.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-invalid">
   <term>
    <constant>CRYPT_SALT_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Método de hash desconhecido ou parâmetros inválidos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-disabled">
   <term>
    <constant>CRYPT_SALT_METHOD_DISABLED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     O método de hash não pode mais ser usado.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-legacy">
   <term>
    <constant>CRYPT_SALT_METHOD_LEGACY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     O método de hash não é mais considerado forte o suficiente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-too-cheap">
   <term>
    <constant>CRYPT_SALT_TOO_CHEAP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Os parâmetros de custo são considerados muito baixos.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.password">
  <title>Algoritmos de senha</title>
  <varlistentry xml:id="constant.password-sha512">
   <term>
    <constant>PASSWORD_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     <constant>PASSWORD_SHA512</constant> é usado para criar novos hashes de senha
     usando o algoritmo <constant>CRYPT_SHA512</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.password-yescrypt">
   <term>
    <constant>PASSWORD_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     <constant>PASSWORD_YESCRYPT</constant> é usado para criar novos hashes
     de senha usando o algoritmo <constant>CRYPT_YESCRYPT</constant>.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
