<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 20e912791754a34fcdef58be5dfc40b87062b487 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<chapter xml:id="svm.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;

 <para>
  O processo básico consiste em definir parâmetros, fornecer dados de treinamento para gerar um
  modelo e, em seguida, fazer previsões com base no modelo. Há um conjunto padrão
  de parâmetros que devem gerar resultados com praticamente qualquer entrada, então começaremos
  analisando os dados.
 </para>
 <para>
  Os dados são fornecidos em um arquivo, um fluxo ou como um array. Se fornecidos em
  um arquivo ou fluxo, devem conter uma linha por exemplo de treinamento, que deve
  ser formatado como uma classe inteira (geralmente 1 e -1) seguido por uma série de
  pares característica/valor, em ordem crescente de característica. As características são números inteiros,
  os valores são floats, geralmente em escala de 0 a 1. Por exemplo:
 </para>
 <para>
  -1 1:0.43 3:0.12 9284:0.2
 </para>
 <para>
  Em um problema de classificação de documentos, digamos, um verificador de spam, cada linha representaria
  um documento. Haveria duas classes: -1 para spam e 1 para "ham".
  Cada característica representaria uma palavra, e o valor representaria a
  importância dessa palavra para o documento (talvez a contagem de frequência, com
  o total dimensionado para o comprimento da unidade). Características que fossem 0 (por exemplo, a palavra não
  aparecia no documento) simplesmente não seriam incluídas.
 </para>
 <para>
  No modo array, os dados devem ser passados ​​como um array de arrays. Cada subarray
  deve ter a classe como primeiro elemento, e então conjuntos de chaves => valores para os
  pares de valores de características.
 </para>
 <para>
  Esses dados são passados ​​para a função de treinamento da classe SVM, que retornará um
  modelo SVM bem-sucedido.
 </para>
 <para>
  Uma vez gerado, um modelo pode ser usado para fazer previsões sobre
  dados nunca antes vistos. Isso pode ser passado como um array para a função de previsão
  do modelo, no mesmo formato de antes, mas sem o rótulo.
  A resposta será a classe.
 </para>
 <para>
  Os modelos podem ser salvos e restaurados conforme necessário, usando as funções
  de salvar e carregar, que recebem um local de arquivo.
 </para>
 <para>
  <example>
   <title>Treinamento com array</title>
   <programlisting role="php">
<![CDATA[
<?php
$data = array(
    array(-1, 1 => 0.43, 3 => 0.12, 9284 => 0.2),
    array(1, 1 => 0.22, 5 => 0.01, 94 => 0.11),
);

$svm = new SVM();
$model = $svm->train($data);

$data = array(1 => 0.43, 3 => 0.12, 9284 => 0.2);
$result = $model->predict($data);
var_dump($result);
$model->save('model.svm');
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
int(-1)
]]>
   </screen>
  </example>
  <example>
   <title>Treinamento com arquivo</title>
   <programlisting role="php">
<![CDATA[
<?php
$svm = new SVM();
$model = $svm->train("traindata.txt");
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

