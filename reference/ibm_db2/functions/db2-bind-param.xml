<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.db2-bind-param" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_bind_param</refname>
  <refpurpose>
   Vincula uma variável PHP a um parâmetro de instrução SQL
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_bind_param</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam><type>int</type><parameter>parameter_number</parameter></methodparam>
   <methodparam><type>string</type><parameter>variable_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer><constant>DB2_PARAM_IN</constant></initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scale</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Vincula uma variável PHP a um parâmetro de instrução SQL em um recurso de instrução
   retornado por <function>db2_prepare</function>. Esta função fornece mais
   controle sobre o tipo de parâmetro, tipo de dados, precisão e escala para o
   parâmetro do que simplesmente passar a variável como parte do array de entrada
   opcional para <function>db2_execute</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Uma instrução preparada retornada de <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_number</parameter></term>
     <listitem>
      <para>
       Especifica a posição, indexada a partir de 1, do parâmetro na instrução
       preparada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
    <term><parameter>variable_name</parameter></term>
     <listitem>
      <para>
       Uma string especificando o nome da variável PHP a ser vinculada ao
       parâmetro especificado por <parameter>parameter_number</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
     <listitem>
      <para>
       Uma constante especificando se a variável PHP deve ser vinculada ao
       parâmetro SQL como um parâmetro de entrada (<constant>DB2_PARAM_IN</constant>),
       um parâmetro de saída (<constant>DB2_PARAM_OUT</constant>) ou como um
       parâmetro que aceita entrada e retorna saída
       (<constant>DB2_PARAM_INOUT</constant>). Para evitar sobrecarga de memória, pode-se
       também especificar <constant>DB2_PARAM_FILE</constant> para vincular a variável PHP
       ao nome de um arquivo que contém dados de objeto grande (BLOB, CLOB ou
       DBCLOB).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       Uma constante especificando o tipo de dados SQL como o qual a variável PHP deverá
       ser vinculada: uma das constantes <constant>DB2_BINARY</constant>,
       <constant>DB2_CHAR</constant>, <literal>DB2_DOUBLE</literal> ou
       <constant>DB2_LONG</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Especifica a precisão com a qual a variável deve ser vinculada ao
       banco de dados. Este parâmetro também pode ser usado para recuperar valores de saída XML
       de procedimentos armazenados. Um valor não negativo especifica o tamanho máximo
       dos dados XML que serão recuperados do banco de dados. Se este parâmetro
       não for usado, um padrão de 1 MB será assumido para recuperar o valor de saída XML
       do procedimento armazenado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scale</parameter></term>
     <listitem>
      <para>
       Especifica a escala com a qual a variável deve ser vinculada ao
       banco de dados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Vinculando variáveis ​​PHP a uma instrução preparada</title>
    <para>
     A instrução SQL no exemplo a seguir usa dois parâmetros de entrada na
     cláusula WHERE. Chamamos <function>db2_bind_param</function> para vincular duas
     variáveis ​​PHP aos parâmetros SQL correspondentes. Observe que as variáveis ​​PHP
     não precisam ser declaradas ou atribuídas antes da chamada a
     <function>db2_bind_param</function>; no exemplo,
     <literal>$lower_limit</literal> recebe um valor antes da chamada a
     <function>db2_bind_param</function>, mas <literal>$upper_limit</literal>
     recebe um valor após a chamada a
     <function>db2_bind_param</function>. As variáveis ​​devem ser vinculadas e, para
     parâmetros que aceitam entrada, devem ter qualquer valor atribuído, antes de chamar
     <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'SELECT name, breed, weight FROM animals
    WHERE weight > ? AND weight < ?';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

// É possível declarar a variável antes de chamar db2_bind_param()
$lower_limit = 1;

db2_bind_param($stmt, 1, "lower_limit", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "upper_limit", DB2_PARAM_IN);

// Também é possível declarar a variável após chamar db2_bind_param()
$upper_limit = 15.0;

if (db2_execute($stmt)) {
    while ($row = db2_fetch_array($stmt)) {
        print "{$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pook, cat, 3.2
Rickety Ride, goat, 9.7
Peaches, dog, 12.3
]]>
    </screen>
   </example>
   <example>
    <title>Chamando procedimentos armazenados com parâmetros IN e OUT</title>
    <para>
     O procedimento armazenado match_animal no exemplo a seguir aceita
     três parâmetros diferentes:
     <orderedlist>
      <listitem>
       <para>
        um parâmetro de entrada (IN) que aceita o nome do primeiro animal como
        entrada
       </para>
      </listitem>
      <listitem>
       <para>
        um parâmetro de entrada-saída (INOUT) que aceita o nome do segundo
        animal como entrada e retorna a string <literal>TRUE</literal> se um
        animal no banco de dados corresponder a ele
       </para>
      </listitem>
      <listitem>
       <para>
        um parâmetro de saída (OUT) que retorna a soma do peso dos
        dois animais identificados
       </para>
      </listitem>
     </orderedlist>
     Além disso, o procedimento armazenado retorna um conjunto de resultados consistindo de
     animais listados em ordem alfabética começando no animal correspondente
     ao valor de entrada do primeiro parâmetro e terminando no animal
     correspondente ao valor de entrada do segundo parâmetro.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'CALL match_animal(?, ?, ?)';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

$name = "Peaches";
$second_name = "Rickety Ride";
$weight = 0;

db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "second_name", DB2_PARAM_INOUT);
db2_bind_param($stmt, 3, "weight", DB2_PARAM_OUT);

print "Valores dos parâmetros vinculados _antes_ de CALL:\n";
print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

if (db2_execute($stmt)) {
    print "Valores dos parâmetros vinculados _after_ CALL:\n";
    print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

    print "Resultados:\n";
    while ($row = db2_fetch_array($stmt)) {
        print "  {$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Valores dos parâmetros vinculados _antes_ de CALL:
  1: Peaches 2: Rickety Ride 3: 0

Valores dos parâmetros vinculados _depois_ de CALL:
  1: Peaches 2: TRUE 3: 22

Resultados:
  Peaches, dog, 12.3
  Pook, cat, 3.2
  Rickety Ride, goat, 9.7
]]>
    </screen>
   </example>
   <example>
    <title>Inserindo um objeto binário grande (BLOB) diretamente de um arquivo</title>
    <para>
     Os dados para objetos grandes são normalmente armazenados em arquivos, como documentos XML
     ou arquivos de áudio. Em vez de ler um arquivo inteiro em uma variável PHP
     e, em seguida, vincular essa variável PHP a uma instrução SQL, é
     possível evitar sobrecarga de memória vinculando o arquivo diretamente ao parâmetro de entrada
     da instrução SQL. O exemplo a seguir demonstra como
     vincular um arquivo diretamente a uma coluna BLOB.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = db2_prepare($conn, "INSERT INTO animal_pictures(picture) VALUES (?)");

$picture = "/opt/albums/spook/grooming.jpg";
$rc = db2_bind_param($stmt, 1, "picture", DB2_PARAM_FILE);
$rc = db2_execute($stmt);
?>
]]>
    </programlisting>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
