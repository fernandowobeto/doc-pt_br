<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 871b71764cdca8238069f27436d96011a6a2cb36 Maintainer: leonardolara Status: ready -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="function.db2-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>
   Executa uma instrução SQL preparada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>


  <para>
   <function>db2_execute</function> executa uma instrução SQL que foi
   preparada por <function>db2_prepare</function>.
  </para>
  <para>
   Se a instrução SQL retornar um conjunto de resultados, por exemplo, uma instrução SELECT
   ou uma CALL para um procedimento armazenado que retorna um ou mais conjuntos de resultados,
   pode ser recuperada uma linha como um array a partir do recurso <literal>stmt</literal>
   usando <function>db2_fetch_assoc</function>,
   <function>db2_fetch_both</function> ou
   <function>db2_fetch_array</function>. Como alternativa, pode ser usada a função
   <function>db2_fetch_row</function> para mover o ponteiro do conjunto de resultados para a
   próxima linha e buscar uma coluna por vez dessa linha com
   <function>db2_result</function>.
  </para>
  <para>
   Consulte <function>db2_prepare</function> para uma breve discussão sobre as
   vantagens de usar <function>db2_prepare</function> e
   <function>db2_execute</function> em vez de <function>db2_exec</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Uma instrução preparada retornada de <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Um array de parâmetros de entrada que correspondem a quaisquer marcadores de parâmetros contidos
       na instrução preparada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Preparando e executando uma instrução SQL com marcadores de parâmetros</title>
    <para>
     O exemplo a seguir prepara uma instrução INSERT que aceita quatro
     marcadores de parâmetros e, em seguida, itera sobre um array de arrays contendo os
     valores de entrada a serem passados ​​para <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'cat', 'Pook', 3.2);

$insert = 'INSERT INTO animals (id, breed, name, weight)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "Novo animal de estimação adicionado com sucesso.";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Novo animal de estimação adicionado com sucesso.
]]>
    </screen>
   </example>
   <example>
    <title>Chamando um procedimento armazenado com um parâmetro OUT</title>
    <para>
     O exemplo a seguir prepara uma instrução CALL que aceita um
     marcador de parâmetro representando um parâmetro OUT, vincula a variável PHP
     <literal>$my_pets</literal> ao parâmetro usando
     <function>db2_bind_param</function>, então emite
     <function>db2_execute</function> para executar a instrução CALL. Após a
     CHAMADA para o procedimento armazenado ter sido feita, o valor de
     <literal>$num_pets</literal> muda para refletir o valor retornado pelo
     procedimento armazenado para aquele parâmetro OUT.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "I have $num_pets pets!";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
I have 7 pets!
]]>
    </screen>
   </example>
   <example>
    <title>Retornando dados XML como um ResultSet SQL</title>
    <para>
     O exemplo a seguir demonstra como trabalhar com documentos armazenados
     em uma coluna XML usando o banco de dados SAMPLE. Usando um pouco de
     SQL/XML bem simples, este exemplo retorna alguns dos nós em um documento XML em
     um formato SQL ResultSet com o qual a maioria dos usuários está familiarizada.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = ?
    ';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE\n");
    }
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Executando um "JOIN" com dados XML</title>
    <para>
     O exemplo a seguir funciona com documentos armazenados em 2 colunas XML diferentes
     no banco de dados SAMPLE. Ele cria 2 tabelas temporárias
     dos documentos XML de 2 colunas diferentes e
     retorna um SQL ResultSet com informações sobre o status de envio
     para o cliente.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
FROM
XMLTABLE(
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
COLUMNS
"CID" BIGINT PATH \'@Cid\',
"NAME" VARCHAR (50) PATH \'name\',
"PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
) as A,
PURCHASEORDER AS B,
XMLTABLE (
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
COLUMNS
"PONUM"  BIGINT PATH \'@PoNum\',
"STATUS" VARCHAR (50) PATH \'@Status\'
) as C
WHERE A.CID = B.CUSTID AND
    B.POID = C.PONUM AND
    A.NAME = ?
';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Retornando dados SQL como parte de um documento XML maior</title>
    <para>
     O exemplo a seguir funciona com uma parte dos documentos PRODUCT.DESCRIPTION
     no banco de dados SAMPLE. Ele cria um documento XML contendo
     descrição do produto (dados XML) e informações de preço (dados SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
    for $prod in $doc/product
    where $prod/description/price < 10.00
    order by $prod/description/price ascending
    return(
        <promoitem> {
        $prod,
        <startdate> {$start} </startdate>,
        <enddate> {$end} </enddate>,
        <promoprice> {$promo} </promoprice>
            } </promoitem>
    )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = ?
';

$stmt = db2_prepare($conn, $query);

$pid = "100-100-01";

if ($stmt) {
    db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_array($stmt)){
    printf("$row[0]\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
