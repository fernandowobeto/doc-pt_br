<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b37bddfde36975bf6bf06ce98867e62d489d49c5 Maintainer: leonardolara Status: ready -->

<refentry xml:id="yaf-route-rewrite.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yaf_Route_Rewrite::__construct</refname>
  <refpurpose>Construtor de Yaf_Route_Rewrite</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>Yaf_Route_Rewrite::__construct</methodname>
   <methodparam><type>string</type><parameter>match</parameter></methodparam>
   <methodparam><type>array</type><parameter>route</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>verify</parameter></methodparam>
  </constructorsynopsis>
  <para>

  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>match</parameter></term>
    <listitem>
     <para>
       Uma expressão que será usada para corresponder ao URI da requisição. Se
       não for correspondida, <classname>Yaf_Route_Rewrite</classname> retornará
       &false;.
     </para>
     <para>
      Pode ser usado o estilo ":nome" para nomear os segmentos correspondidos, e "*"
      para corresponder ao restante dos segmentos do URI.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>route</parameter></term>
    <listitem>
     <para>
      Quando a expressão corresponde ao URI da requisição,
      <classname>Yaf_Route_Rewrite</classname> usará este parâmetro para decidir qual
      módulo, controlador ou ação é o destino.
     </para>
     <para>
      Cada chave ("module", "controller", "action") neste array é opcional, se não for atribuído um
      valor específico, o encaminhamento será o padrão.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>verify</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <classname>Yaf_Route_Rewrite</classname></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Adiciona uma rota de re-escrita à pilha de rotas Yaf_Router
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("nome",
        new Yaf_Route_rewrite(
           "/produto/:nome/:id/*", // corresponde ao URI que inicia com "/produto"
           array(
               'controller' => "produto",  // rota para o controlador "produto"
           ),
        )
    );
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
/* para http://seudominio.com/produto/foo/22/foo/bar,
 * a rota resultará nos seguintes valores:
 */
array(
  "controller" => "produto",
  "module"     => "index", // (padrão)
  "action"     => "index", // (padrão)
)

/**
 * e os parâmetros da requisição:
 */
array(
  "nome" => "foo",
  "id"   => 22,
  "foo"  => bar
)
]]>
   </screen>
  </example>
  <example>
   <title>Exemplo de <classname>Yaf_Route_Rewrite</classname></title>
   <programlisting role="php">
<![CDATA[
    <?php
   /**
    * Adiciona uma rota de re-escrita à pilha de rotas Yaf_Router chamando addconfig
    */
    $config = array(
        "name" => array(
           "type"  => "rewrite",        // rota Yaf_Route_Rewrite
           "match" => "/user-list/:id", // corresponde apenas a /user-list/?/
           "route" => array(
               'controller' => "user",  // rota para o controlador "user"
               'action'     => "list",  // rota para a ação "list"
           ),
        ),
    );
    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(
        new Yaf_Config_Simple($config));
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
/* para http://seudominio.com/user-list/22
 * a rota resultará nos seguintes valores:
 */
array(
  "controller" => "user",
  "action"     => "list",
  "module"     => "index", // (padrão)
)

/**
 * e os parâmetros da requisição:
 */
array(
  "id"   => 22,
)
]]>
   </screen>
  </example>
  <example>
   <title>Exemplo de <classname>Yaf_Route_Rewrite</classname> (a partir do Yaf 2.3.0)</title>
   <programlisting role="php">
<![CDATA[
    <?php
   /**
    * Adiciona uma rota de re-escrita e usa o resultado da correspondência como o nome m/c/a
    */
    $config = array(
        "name" => array(
           "type"  => "rewrite",
           "match" => "/user-list/:a/:id", // corresponde apenas a /user-list/*
           "route" => array(
               'controller' => "user",   // rota para o controlador "user"
               'action'     => ":a",     // rota para a ação ":a"
           ),
        ),
    );
    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(
        new Yaf_Config_Simple($config));
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
/* para http://seudominio.com/user-list/list/22,
 * a rota resultará nos seguintes valores:
 */
array(
  "controller" => "user",
  "action"     => "list",
  "module"     => "index", // (padrão)
)

/**
 * e os parâmetros da requisição:
 */
array(
  "id"   => 22,
)
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yaf_Router::addRoute</methodname></member>
   <member><methodname>Yaf_Router::addConfig</methodname></member>
   <member><classname>Yaf_Route_Static</classname></member>
   <member><classname>Yaf_Route_Supervar</classname></member>
   <member><classname>Yaf_Route_Simple</classname></member>
   <member><classname>Yaf_Route_Regex</classname></member>
   <member><classname>Yaf_Route_Map</classname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
