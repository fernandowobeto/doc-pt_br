<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7541512acf899391b68c3b6bae66a4fcc65e6c4e Maintainer: leonardolara Status: ready -->

<reference xml:id="class.yaf-loader" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe Yaf_Loader</title>
 <titleabbrev>Yaf_Loader</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Loader intro -->
  <section xml:id="yaf-loader.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Loader</classname> introduz uma solução compreensiva de
    carregamento automático para o Yaf.
   </para>
   <para>
    Na primeira vez que uma instância de <classname>Yaf_Application</classname> for recuperada,
    <classname>Yaf_Loader</classname> instanciará um singleton e se registrará com
    spl_autoload. Uma instância é recuperada usando <methodname>Yaf_Loader::getInstance</methodname>.
   </para>
   <para>
    <classname>Yaf_Loader</classname> tenta carregar uma classe em apenas uma tentativa.
    Se falhar, dependerá de <link
    linkend="ini.yaf.use-spl-autoload">yaf.use_spl_autoload</link>. Se esta
    configuração estiver ativada, <methodname>Yaf_Loader::autoload</methodname> retornará
    &false;, dando assim a chance para outra função de carregamento automático. Se estiver desligada
    (por padrão), <methodname>Yaf_Loader::autoload</methodname> retornará
    &true; e o mais importante é que um alerta será acionado
    (muito útil para descobrir por que uma classe não pôde ser carregada).
    <note>
     <para>
      A configuração yaf.use_spl_autoload deve ser mantida desativada, a menos que haja alguma biblioteca
      com seu próprio mecanismo de carregamento automático e seja impossível reescrevê-lo.
     </para>
    </note>
   </para>
   <para>
    Por padrão, <classname>Yaf_Loader</classname> assume que todas as bibliotecas (script
    definido por classe) são armazenadas no <link linkend="ini.yaf.library">diretório de
    biblioteca global</link>, que é definido no php.ini (yaf.library).
   </para>

   <para>
    Se for desejado que o <classname>Yaf_Loader</classname> pesquise algumas
    classes (bibliotecas) no <link linkend="yaf-loader.props.library">diretório de classes
    local</link> (que é definido no application.ini e por padrão
    é <link
    linkend="configuration.yaf.directory">application.directory</link> . "/library"),
    o prefixo da classe deve ser registrado usando
    <methodname>Yaf_Loader::registerLocalNameSpace</methodname>.
   </para>

   <para>
    Vejamos alguns exemplo (assumindo que APPLICATION_PATH seja <link
     linkend="configuration.yaf.directory">application.directory</link>):
    <example>
     <title>Exemplo de configuração</title>
      <programlisting role="shell">
<![CDATA[
// Assumindo a configuração a seguir no php.ini:
yaf.library = "/global_dir"

// Assumindo a configuração a seguir no application.ini
application.library = APPLICATION_PATH "/library"
]]>
     </programlisting>
    </example>

    Supondo que o seguinte namespace local esteja registrado:
    <example>
     <title>Registrando namespace local</title>
     <programlisting role="php">
<![CDATA[
<?php
class Bootstrap extends Yaf_Bootstrap_Abstract {
     public function _initLoader($dispatcher) {
          Yaf_Loader::getInstance()->registerLocalNameSpace(array("Foo", "Bar"));
     }
}
?>
]]>
     </programlisting>
    </example>

    A seguir, exemplos de carregamento automático:
    <example>
     <title>Exemplo de carregamento de classe</title>
      <programlisting role="shell">
<![CDATA[
class Foo_Bar_Test =>
  // APPLICATION_PATH/library/Foo/Bar/Test.php

class GLO_Name  =>
  // /global_dir/Glo/Name.php

class BarNon_Test
  // /global_dir/Barnon/Test.php
]]>
      </programlisting>
    </example>

   <example>
    <title>Exemplo de carregamento de classe de namespace</title>
    <programlisting role="shell">
<![CDATA[
class \Foo\Bar\Dummy =>
   // APPLICATION_PATH/library/Foo/Bar/Dummy.php

class \FooBar\Bar\Dummy =>
   // /global_dir/FooBar/Bar/Dummy.php
]]>
    </programlisting>
   </example>
  </para>

  <para>
   Observe que todos os diretórios têm a primeira letra maiúscula. Eles podem ficar em letras
   minúsculas definindo <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link> para "On" no php.ini.
  </para>

  <para>
   <classname>Yaf_Loader</classname> também é projetado para carregar as classes MVC,
   e a regra é:
   <example>
    <title>Exemplo de carregamento de classes MVC</title>
    <programlisting role="shell">
<![CDATA[
Controller Classes =>
// APPLICATION_PATH/controllers/

Model Classes =>
// APPLICATION_PATH/models/

Plugin Classes =>
// APPLICATION_PATH/plugins/
]]>
    </programlisting>
   </example>

   Yaf identifica o sufixo de uma classe (isto é padrão, o sufixo
   pode ser alterado pela configuração <link
    linkend="ini.yaf.name-suffix">yaf.name_suffix</link>) para decidir se é
   uma classe MVC:
   <example>
    <title>Distinções de classes MVC</title>
   <programlisting role="shell">
<![CDATA[
Controller Classes =>
    // ***Controller

Model Classes =>
    // ***Model

Plugin Classes =>
    // ***Plugin
]]>
   </programlisting>
  </example>

   Alguns exemplos:
   <example>
    <title>Exemplo de carregamento MVC</title>
    <programlisting role="shell">
<![CDATA[
class IndexController
    // APPLICATION_PATH/controllers/Index.php

class DataModel =>
   // APPLICATION_PATH/models/Data.php

class DummyPlugin =>
  // APPLICATION_PATH/plugins/Dummy.php

class A_B_TestModel =>
  // APPLICATION_PATH/models/A/B/Test.php
]]>
    </programlisting>
  </example>

  <note>
   <para>
    A partir do Yaf 2.1.18, é oferecido suporte ao carregamento automático de controladores para o lado do script do usuário
    (isto é, o carregamento automático é acionado pelo script PHP do usuário, por exemplo: acessar uma
    propriedade estática do controlador no Bootstrap ou em Plugins),
    mas o carregador automático apenas tenta localizar o script da classe do controlador sob o pasta
    padrão do módulo, que é "APPLICATION_PATH/controllers/".
   </para>
  </note>
   Além disso, o diretório será afetado por <link linkend="ini.yaf.lowcase-path">yaf.lowcase_path</link>.
  </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-loader.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Loader</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>Yaf_Loader</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.local-ns">_local_ns</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.library">_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-loader.props.global-library">_global_library</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <varname linkend="yaf-loader.props.instance">_instance</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-loader')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>


<!-- {{{ Yaf_Loader properties -->
  <section xml:id="yaf-loader.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-loader.props.local-ns">
     <term><varname>_local_ns</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.library">
     <term><varname>_library</varname></term>
     <listitem>
      <para>
       Por padrão, este valor é <link
       linkend="configuration.yaf.directory">application.directory</link> . "/library".
       Ele pode ser alterado no application.ini (application.library) ou com uma chamada a
      <methodname>Yaf_Loader::setLibraryPath</methodname>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.global-library">
     <term><varname>_global_library</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-loader.props.instance">
     <term><varname>_instance</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>


 &reference.yaf.entities.yaf-loader;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
