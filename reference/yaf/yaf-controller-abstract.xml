<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: leonardolara Status: ready -->

<reference xml:id="class.yaf-controller-abstract" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>A classe Yaf_Controller_Abstract</title>
 <titleabbrev>Yaf_Controller_Abstract</titleabbrev>

 <partintro>

<!-- {{{ Yaf_Controller_Abstract intro -->
  <section xml:id="yaf-controller-abstract.intro">
   &reftitle.intro;
   <para>
    <classname>Yaf_Controller_Abstract</classname> é o coração do sustema do
    Yaf. MVC é o acrônimo para (Modelo-Visualizador-Controlador) e é um padrão de projeto
    cujo objetivo é separar a lógica da aplicação da lógica da exibição.
   </para>
   <para>
    Todo controlador customizado deve herdar
    <classname>Yaf_Controller_Abstract</classname>.
   </para>
   <para>
    A função __construct não pode ser definida no controlador
    customizado. Por isso, <classname>Yaf_Controller_Abstract</classname> fornece
    um método mágico: <methodname>Yaf_Controller_Abstract::init</methodname>.
   </para>
   <para>
    Se um método init() for definido no controlador customizado, ele será
    chamado assim que o controlador for instanciado.
   </para>
   <para>
    A ação pode ter argumentos, quando uma solicitação chega, se houver a variável
    de mesmo nome nos parâmetros da solicitação (veja
    <methodname>Yaf_Request_Abstract::getParam</methodname>). Depois de roteada,
    Yaf irá passá-los para o método de ação
    (veja <methodname >Yaf_Action_Abstract::execute</methodname>).
    <note>
     <para>
      Esses argumentos são obtidos diretamente sem filtragem, devem ser cuidadosamente
      processados ​​​​antes de serem usados.
     </para>
    </note>
   </para>
  </section>
<!-- }}} -->

  <section xml:id="yaf-controller-abstract.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Yaf_Controller_Abstract</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>Yaf_Controller_Abstract</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="yaf-controller-abstract.props.actions">actions</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.module">_module</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.name">_name</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.request">_request</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.response">_response</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.invoke-args">_invoke_args</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <varname linkend="yaf-controller-abstract.props.view">_view</varname>
    </fieldsynopsis>


    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-controller-abstract')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.yaf-controller-abstract')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>


<!-- {{{ Yaf_Controller_Abstract properties -->
  <section xml:id="yaf-controller-abstract.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="yaf-controller-abstract.props.actions">
     <term><varname>actions</varname></term>
     <listitem>
      <para>
       Um método de ação também pode ser definido em um script PHP separado usando
       esta propriedade e <classname>Yaf_Action_Abstract</classname>.
      <example>
       <title>Definindo ação em um arquivo separado</title>
        <programlisting role="php">
<![CDATA[
<?php
class IndexController extends Yaf_Controller_Abstract {
    protected $actions = array(
        /** agora dummyAction está definida em um arquivo separado */
        "dummy" => "actions/Dummy_action.php",
    );

    /* o método de ação pode ter argumentos */
    public function indexAction($name, $id) {
       /* $name e $id são dados brutos inseguros */
       assert($name == $this->getRequest()->getParam("name"));
       assert($id   == $this->_request->getParam("id"));
    }
}
?>
]]>
        </programlisting>
      </example>
      <example>
       <title>Dummy_action.php</title>
        <programlisting role="php">
<![CDATA[
<?php
class DummyAction extends Yaf_Action_Abstract {
    /* uma classe de ação deve definir este método como o ponto de entrada */
    public function execute() {
    }
}
?>
]]>
        </programlisting>
      </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.module">
     <term><varname>_module</varname></term>
     <listitem>
      <para>
       Nome do módulo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.name">
     <term><varname>_name</varname></term>
     <listitem>
      <para>
       Nome do controlador.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.request">
     <term><varname>_request</varname></term>
     <listitem>
      <para>
       Objeto da requisição atual.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.response">
     <term><varname>_response</varname></term>
     <listitem>
      <para>
       Objeto da resposta atual.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.invoke-args">
     <term><varname>_invoke_args</varname></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="yaf-controller-abstract.props.view">
     <term><varname>_view</varname></term>
     <listitem>
      <para>
       Objeto do mecanismo de visualização.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->


 </partintro>

 &reference.yaf.entities.yaf-controller-abstract;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
