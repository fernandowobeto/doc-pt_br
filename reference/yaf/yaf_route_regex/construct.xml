<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b37bddfde36975bf6bf06ce98867e62d489d49c5 Maintainer: leonardolara Status: ready -->

<refentry xml:id="yaf-route-regex.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yaf_Route_Regex::__construct</refname>
  <refpurpose>Construtor de Yaf_Route_Regex</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>Yaf_Route_Regex::__construct</methodname>
   <methodparam><type>string</type><parameter>match</parameter></methodparam>
   <methodparam><type>array</type><parameter>route</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>map</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>verify</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>reverse</parameter></methodparam>
  </constructorsynopsis>
  <para>
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>match</parameter></term>
    <listitem>
     <para>
      Uma expressão regular completa. Será usada para corresponder a uma URI de requisição. Se
      não corresponder, <classname>Yaf_Route_Regex</classname> retornará
      &false;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>route</parameter></term>
    <listitem>
     <para>
      Quando a expressão corresponder ao URI,
      <classname>Yaf_Route_Regex</classname> usará este parâmetro para decidir que
      valores m/c/a serão usados na rota.
     </para>
     <para>
      Qualquer dos valores de m/c/a neste array é opcional. Se não for especificado um
      valor, será usado o roteamento padrão.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>map</parameter></term>
    <listitem>
     <para>
      Um array para atribuir nomes aos grupos de captura no resultado da correspondência.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>verify</parameter></term>
    <listitem>
     <para>

     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>reverse</parameter></term>
    <listitem>
     <para>
      Uma string usada para montar o URL, consulte
      <methodname>Yaf_Route_Regex::assemble</methodname>.
      <note>
       <para>
        Este parâmetro está disponível a partir do Yaf 2.3.0.
       </para>
      </note>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <classname>Yaf_Route_Regex</classname></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Adiciona uma rota "regex" à pilha de rotas Yaf_Router
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/([^/]+)/([^/])+#", // corresponde a um URI iniciando com "/product"
           array(
               'controller' => "product",  // rota para o controlador de "/product",
           ),
           array(
              1 => "name",   // agora é possível chamar $request->getParam("name")
              2 => "id",     // para obter o primeiro grupo de captura na expressão correspondida.
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemplo de <classname>Yaf_Route_Regex</classname> (a partir do Yaf 2.3.0)</title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Usa o resultado da correspondência como nome MVC
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/([^/]+)/([^/])+#i", // corresponde ao URI iniciando com "/product"
           array(
              'controller' => ":name", // rota para :name, que é $1 no resultado da correspondência como o nome do controlador
           ),
           array(
              1 => "name",   // agora é possível chamar $request->getParam("name")
              2 => "id",     // para obter o primeiro grupo de captura na expressão correspondida.
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemplo de <classname>Yaf_Route_Regex</classname> e grupo de captura nomeado (a partir do Yaf 2.3.0)</title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Usa o resultado da correspondência como nome MVC
    */
    Yaf_Dispatcher::getInstance()->getRouter()->addRoute("name",
        new Yaf_Route_Regex(
           "#^/product/(?<name>[^/]+)/([^/])+#i", // corresponde ao URI iniciando com "/product"
           array(
           'controller' => ":name", // rota para :name,
                                    // que é o grupo de captura nomeado 'name' no resultado da correspondência como o nome do controlador
           ),
           array(
              2 => "id",
           )
        )
    );
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemplo de <classname>Yaf_Route_Regex</classname></title>
   <programlisting role="php">
<![CDATA[
<?php
   /**
    * Adiciona uma rota "regex" à pilha de rotas Yaf_Router chamando addconfig
    */
    $config = array(
        "name" => array(
           "type"  => "regex",          // rota Yaf_Route_Regex
           "match" => "#(.*)#",         // corresponde a um URI de requisição genérico
           "route" => array(
               'controller' => "product",  // rota para o controlador de "product",
               'action'     => "dummy",    // rota para uma ação "dummy"
           ),
           "map" => array(
              1 => "uri",   // agora pode-se chamar $request->getParam("uri")
           ),
        ),
    );
    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(
        new Yaf_Config_Simple($config));
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yaf_Router::addRoute</methodname></member>
   <member><methodname>Yaf_Router::addConfig</methodname></member>
   <member><classname>Yaf_Route_Static</classname></member>
   <member><classname>Yaf_Route_Supervar</classname></member>
   <member><classname>Yaf_Route_Simple</classname></member>
   <member><classname>Yaf_Route_Rewrite</classname></member>
   <member><classname>Yaf_Route_Map</classname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
