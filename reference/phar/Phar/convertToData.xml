<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="phar.converttodata" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::convertToData</refname>
  <refpurpose>Converte um arquivo phar em um arquivo tar ou zip não executável</refpurpose>
 </refnamediv>


 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type class="union"><type>PharData</type><type>null</type></type><methodname>Phar::convertToData</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>format</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>compression</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>extension</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <para>
   Este método é usado para converter um arquivo executável phar em um arquivo
   tar ou zip. Para tornar o tar ou zip não executável, o stub phar
   e os arquivos de alias phar são removidos do arquivo recém-criado.
  </para>
  <para>
   Se nenhuma alteração for especificada, este método lança uma <classname>BadMethodCallException</classname>
   se o arquivo estiver no formato phar. Para arquivos no formato tar ou zip,
   este método converte o arquivo em um arquivo não executável.
  </para>
  <para>
   Se bem-sucedido, o método cria um novo arquivo no disco e retorna um objeto <classname>PharData</classname>.
   O arquivo antigo não é removido do disco e deve ser removido manualmente após
   a conclusão do processo.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Deve ser um dos seguintes: <literal>Phar::TAR</literal>
       ou <literal>Phar::ZIP</literal>. Se definido como &null;, o formato de arquivo existente
       será preservado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>compression</parameter></term>
     <listitem>
      <para>
       Deve ser um dos seguintes: <literal>Phar::NONE</literal> para nenhuma compactação de arquivo,
       <literal>Phar::GZ</literal> para compactação baseada em zlib e
       <literal>Phar::BZ2</literal> para compactação baseada em bzip.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extension</parameter></term>
     <listitem>
      <para>
       Este parâmetro é usado para substituir a extensão de arquivo padrão para um
       arquivo convertido. Observe que <literal>.phar</literal> não pode ser usado
       em nenhum lugar no nome do arquivo para um arquivo tar ou zip não executável.
      </para>
      <para>
       Ao converter para um arquivo phar baseado em tar, as
       extensões padrão são <literal>.tar</literal>, <literal>.tar.gz</literal>,
       e <literal>.tar.bz2</literal>, dependendo da compactação especificada.
       Para arquivos baseados em zip, a
       extensão padrão é <literal>.zip</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   O método retorna um objeto <classname>PharData</classname> em caso de sucesso,
   ou &null; em caso de falha.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método lança <classname>BadMethodCallException</classname> quando não é possível
   compactar, um método de compactação desconhecido foi especificado, o arquivo solicitado
   está armazenando em buffer com <function>Phar::startBuffering</function> e
   não foi concluído com <function>Phar::stopBuffering</function>,
   e uma <classname>PharException</classname> se algum problema for encontrado
   durante o processo de criação do phar.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>format</parameter>, <parameter>compression</parameter> e <parameter>extension</parameter> agora são anuláveis.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>Phar::convertToData</function></title>
    <para>
     Using Phar::convertToData():
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $tarphar = new Phar('meuphar.phar.tar');
    // observe que meuphar.phar.tar *não* é excluído
    // converte para o formato de arquivo tar não executável
    // cria meuphar.tar
    $tar = $tarphar->convertToData();
    // converte para formato zip não executável, cria meuphar.zip
    $zip = $tarphar->convertToData(Phar::ZIP);
    // cria meuphar.tbz
    $tgz = $tarphar->convertToData(Phar::TAR, Phar::BZ2, '.tbz');
    // cria meuphar.phar.tgz
    $phar = $tarphar->convertToData(Phar::PHAR); // lança exceção
} catch (Exception $e) {
    // manipula os erros aqui
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::convertToExecutable</function></member>
    <member><function>PharData::convertToExecutable</function></member>
    <member><function>PharData::convertToData</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
