<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f03806fcd8fe03a0501bd40b6e3939ff6589a1d2 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="phar.startbuffering" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Phar::startBuffering</refname>
  <refpurpose>Inicia o buffer das operações de gravação Phar, não modifica o objeto Phar no disco</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type>void</type><methodname>Phar::startBuffering</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Embora tecnicamente desnecessário, o método <function>Phar::startBuffering</function>
   pode proporcionar um aumento significativo de desempenho ao criar ou modificar um
   arquivo Phar com um grande número de arquivos. Normalmente, sempre que um arquivo
   dentro de um arquivo Phar é criado ou modificado de alguma forma, todo o arquivo Phar
   será recriado com as alterações. Dessa forma, o arquivo
   estará atualizado com a atividade realizada nele.
  </para>
  <para>
   No entanto, isso pode ser desnecessário ao simplesmente criar um novo arquivo Phar,
   quando faria mais sentido gravar o arquivo inteiro de uma só vez.
   Da mesma forma, muitas vezes é necessário fazer uma série de alterações e garantir
   que todas elas sejam possíveis antes de fazer qualquer alteração no disco, semelhante ao
   conceito de transações de banco de dados relacional. O
   par de métodos <function>Phar::startBuffering</function>/<function>Phar::stopBuffering</function>
   é fornecido para esse propósito.
  </para>
  <para>
   O buffer de gravação Phar é por arquivo, o buffer ativo para o arquivo Phar
   <literal>foo.phar</literal> não afeta as alterações
   no arquivo Phar <literal>bar.phar</literal>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>Phar::startBuffering</function></title>
    <para>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// garantindo que o arquivo não existe
@unlink('novophar.phar');
try {
    $p = new Phar(dirname(__FILE__) . '/novophar.phar', 0, 'novophar.phar');
} catch (Exception $e) {
    echo 'Não foi possível criar o phar:', $e;
}
echo 'O novo phar tem ' . $p->count() . " entradas\n";
$p->startBuffering();
$p['arquivo.txt'] = 'olá';
$p['arquivo2.txt'] = 'pessoal';
$p['arquivo2.txt']->setCompressedGZ();
$p['arquivo3.txt'] = 'carafeliz';
$p['arquivo3.txt']->setMetadata(42);
$p->setStub("<?php
function __autoload($class)
{
    include 'phar://meuphar.phar/' . str_replace('_', '/', $class) . '.php';
}
Phar::mapPhar('meuphar.phar');
include 'phar://meuphar.phar/startup.php';
__HALT_COMPILER();");
$p->stopBuffering();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::stopBuffering</function></member>
    <member><function>Phar::isBuffering</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
