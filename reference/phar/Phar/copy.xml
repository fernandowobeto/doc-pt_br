<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8d09722b6d95d2545d5a4c9415c6955efc3a464e Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="phar.copy" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::copy</refname>
  <refpurpose>Copia um arquivo interno do arquivo phar para outro novo arquivo dentro do phar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>public</modifier> <type>true</type><methodname>Phar::copy</methodname>
   <methodparam><type>string</type><parameter>from</parameter></methodparam>
   <methodparam><type>string</type><parameter>to</parameter></methodparam>
  </methodsynopsis>
  &phar.write;

  <para>
   Copia um arquivo interno do arquivo phar para outro novo arquivo dentro do phar.
   Esta é uma alternativa orientada a objetos ao uso de <function>copy</function> com
   o empacotador de fluxo phar.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>from</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>to</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.true.always;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lança uma <classname>UnexpectedValueException</classname> se o arquivo de origem não
   existir, se o arquivo de destino já existir, se o acesso de gravação estiver desabilitado, se a abertura
   do arquivo falhar, se a leitura do arquivo de origem falhar ou uma <classname>PharException</classname>
   se a gravação das alterações no arquivo phar falhar.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>Phar::copy</function></title>
    <para>
     Este exemplo mostra o uso de <function>Phar::copy</function> e o
     desempenho equivalente do empacotador de fluxo para a mesma coisa. A principal
     diferença entre as duas abordagens é o tratamento de erros. Todos os métodos Phar
     geram exceções, enquanto o empacotador de fluxo usa <function>trigger_error</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

try {
    $phar = new Phar('meuphar.phar');

    $phar['a'] = 'olá';
    $phar->copy('a', 'b');

    echo $phar['b']; // Exibe "phar://meuphar.phar/b"
} catch (Exception $e) {
    // Lida com o erro
}

// O empacotador de fluxo equivalente ao código acima.
// E_WARNING são acionados em caso de erro em vez de uma exceção
copy('phar://meuphar.phar/a', 'phar//meuphar.phar/c');
echo file_get_contents('phar://meuphar.phar/c'); // Exibe "olá"

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
