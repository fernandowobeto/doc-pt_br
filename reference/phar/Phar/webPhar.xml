<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5beaad9885973652023784f1a4656a5e497779fb Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="phar.webphar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::webPhar</refname>
  <refpurpose>Encaminha uma solicitação de um navegador da web para um arquivo interno dentro do arquivo phar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Phar">
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::webPhar</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>alias</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>index</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>null</type></type><parameter>fileNotFoundScript</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>mimeTypes</parameter><initializer>[]</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>rewrite</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>Phar::webPhar</function> serve como <function>Phar::mapPhar</function> para
   phars baseados na web. Este método analisa <varname>$_SERVER['REQUEST_URI']</varname> e
   encaminha uma solicitação de um navegador web para um arquivo interno dentro do arquivo phar.
   Ele simula um servidor web, encaminhando solicitações para o arquivo correto, ecoando os cabeçalhos
   corretos e analisando arquivos PHP conforme necessário. Combinado com <function>Phar::mungServer</function>
   e <function>Phar::interceptFileFuncs</function>, qualquer aplicação web pode ser usada
   sem modificações a partir de um arquivo phar.
  </para>
  <para>
   <function>Phar::webPhar</function> só deve ser
   chamado a partir do stub de um arquivo phar (veja <link linkend="phar.fileformat.stub">aqui</link>
   para mais informações sobre o que é um stub).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>alias</parameter></term>
     <listitem>
      <para>
       O apelido que pode ser usado em URLs <literal>phar://</literal> para
       se referir a este arquivo, em vez do seu caminho completo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       A localização dentro do phar do índice do diretório.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fileNotFoundScript</parameter></term>
     <listitem>
      <para>
       O local do script a ser executado quando um arquivo não for encontrado. Este
       script deve gerar os cabeçalhos HTTP 404 corretos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mimeTypes</parameter></term>
     <listitem>
      <para>
       Um array mapeando extensões de arquivo adicionais para o tipo MIME.
       Se o mapeamento padrão for suficiente, passe um array vazio.
       Por padrão, essas extensões são mapeadas para os seguintes tipos MIME:
       <programlisting role="php">
        <![CDATA[
<?php
$mimes = array(
    'phps' => Phar::PHPS, // passado para highlight_file()
    'c' => 'text/plain',
    'cc' => 'text/plain',
    'cpp' => 'text/plain',
    'c++' => 'text/plain',
    'dtd' => 'text/plain',
    'h' => 'text/plain',
    'log' => 'text/plain',
    'rng' => 'text/plain',
    'txt' => 'text/plain',
    'xsd' => 'text/plain',
    'php' => Phar::PHP, // interpretado como PHP
    'inc' => Phar::PHP, // interpretado como PHP
    'avi' => 'video/avi',
    'bmp' => 'image/bmp',
    'css' => 'text/css',
    'gif' => 'image/gif',
    'htm' => 'text/html',
    'html' => 'text/html',
    'htmls' => 'text/html',
    'ico' => 'image/x-ico',
    'jpe' => 'image/jpeg',
    'jpg' => 'image/jpeg',
    'jpeg' => 'image/jpeg',
    'js' => 'application/x-javascript',
    'midi' => 'audio/midi',
    'mid' => 'audio/midi',
    'mod' => 'audio/mod',
    'mov' => 'movie/quicktime',
    'mp3' => 'audio/mp3',
    'mpg' => 'video/mpeg',
    'mpeg' => 'video/mpeg',
    'pdf' => 'application/pdf',
    'png' => 'image/png',
    'swf' => 'application/shockwave-flash',
    'tif' => 'image/tiff',
    'tiff' => 'image/tiff',
    'wav' => 'audio/wav',
    'xbm' => 'image/xbm',
    'xml' => 'text/xml',
);
?>
        ]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rewrite</parameter></term>
     <listitem>
      <para>
       Uma função que recebe uma string como seu único parâmetro e deve retornar uma <type>string</type> ou &false;.
      </para>
      <para>
       Se fast-cgi ou cgi estiverem sendo usados, o parâmetro passado para a função será o valor da
       variável <varname>$_SERVER['PATH_INFO']</varname>. Caso contrário, o parâmetro passado para a função será o valor
       da variável <varname>$_SERVER['REQUEST_URI']</varname>.
      </para>
      <para>
       Se uma string for retornada, ela será usada como caminho interno do arquivo. Se &false; for retornado, webPhar() enviará
       um código HTTP 403 Forbidden (Proibido).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lança <classname>PharException</classname> quando não for possível abrir o arquivo
   interno para saída, ou se
   for chamado de um arquivo não stub. Se um valor de array inválido for passado para
   <parameter>mimeTypes</parameter> ou uma função de retorno inválida for passado para <parameter>rewrite</parameter>, uma
   <classname>UnexpectedValueException</classname> será lançada.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>fileNotFoundScript</parameter> e <parameter>rewrite</parameter> agora são anuláveis.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo de <function>Phar::webPhar</function></title>
    <para>
     Com o exemplo abaixo, o phar criado exibirá <literal>Hello World</literal>
     se alguém navegar para <literal>/myphar.phar/index.php</literal> ou para
     <literal>/myphar.phar</literal>, e exibirá a fonte de
     <literal>index.phps</literal> se alguém navegar para <literal>/myphar.phar/index.phps</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// criando o arquivo phar:
try {
    $phar = new Phar('myphar.phar');
    $phar['index.php'] = '<?php echo "Hello World"; ?>';
    $phar['index.phps'] = '<?php echo "Hello World"; ?>';
    $phar->setStub('<?php
Phar::webPhar();
__HALT_COMPILER(); ?>');
} catch (Exception $e) {
    // lida com erros
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::mungServer</function></member>
    <member><function>Phar::interceptFileFuncs</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
