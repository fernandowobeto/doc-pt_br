<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e9f972da6918eabb189ba377822a1d6ad982c96d Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<chapter xml:id="phar.using" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Usando Arquivos Phar</title>

 <section xml:id="phar.using.intro" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Usando Arquivos Phar: Introdução</title>
 <para>
  Os arquivos Phar são semelhantes em conceito aos arquivos JAR do Java, mas são adaptados
  às necessidades e à flexibilidade de aplicações PHP. Um arquivo Phar é
  usado para distribuir uma aplicação ou biblioteca PHP completa em um único arquivo.
  Uma aplicação de arquivo Phar é usada exatamente como qualquer outra aplicação PHP:
 </para>
 <screen>
  <![CDATA[
php aplicacaoincrivel.phar
  ]]>
 </screen>
 <para>
  Usar uma biblioteca de arquivo Phar é idêntico ao uso de qualquer outra biblioteca PHP:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
include 'bibliotecafantastica.phar';
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  O empacotador de fluxo <literal>phar</literal> fornece o núcleo da extensão phar e
  é explicado em detalhes <link linkend="phar.using.stream">aqui</link>.
  O empacotador de fluxo phar permite acessar os arquivos dentro de um arquivo phar usando
  as funções de arquivo padrão do PHP <function>fopen</function>, <function>opendir</function> e
  outras que funcionam em arquivos comuns. O empacotador de fluxo <literal>phar</literal> suporta todas as
  operações de leitura/gravação em arquivos e diretórios.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
include 'phar://bibliotecafantastica.phar/interno/arquivo.php';
header('Content-type: image/jpeg');
// phars pode ser acessado pelo caminho completo ou por apelido
echo file_get_contents('phar:///caminhocompleto/para/bibliotecafantastica.phar/imagens/uau.jpg');
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  A classe <classname>Phar</classname> implementa funcionalidades avançadas para acessar
  arquivos e criar arquivos phar. A classe Phar é explicada em detalhes
  <link linkend="phar.using.object">aqui</link>.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // abre um phar existente
    $p = new Phar('bibliotecafantastica.phar', 0);
    // Phar estende a classe DirectoryIterator do SPL
    foreach (new RecursiveIteratorIterator($p) as $file) {
        // $file é uma classe PharFileInfo e herda de SplFileInfo
        echo $file->getFileName() . "\n";
        echo file_get_contents($file->getPathName()) . "\n"; // exibir conteúdo;
    }
    if (isset($p['internal/file.php'])) {
        var_dump($p['internal/file.php']->getMetadata());
    }

    // cria um novo phar - phar.readonly deve ser 0 em php.ini
    // phar.readonly é habilitado por padrão por motivos de segurança.
    // Em servidores de produção, Phars nunca precisam ser criados,
    // apenas executados.
    if (Phar::canWrite()) {
        $p = new Phar('novophar.tar.phar', 0, 'novophar.tar.phar');
        // faz deste um arquivo phar baseado em tar, compactado com compressão gzip (.tar.gz)
        $p = $p->convertToExecutable(Phar::TAR, Phar::GZ);

        // cria transação - nada é escrito em novophar.phar
        // até que stopBuffering() seja chamado, embora seja necessário armazenamento temporário
        $p->startBuffering();
        // adiciona todos os arquivos em /caminho/para/projeto, salvando no phar com o prefixo "projeto"
        $p->buildFromIterator(new RecursiveIteratorIterator(new RecursiveDirectoryIterator('/caminho/para/projeto')), '/caminho/para/');

        // adiciona um novo arquivo por meio da API de acesso a array
        $p['arquivo1.txt'] = 'Informação';
        $fp = fopen('arquivogigante.dat', 'rb');
        // copia todos os dados do fluxo
        $p['dados/arquivogigante.dat'] = $fp;

        if (Phar::canCompress(Phar::GZ)) {
            $p['dados/arquivogigante.dat']->compress(Phar::GZ);
        }

        $p['imagens/uau.jpg'] = file_get_contents('imagens/uau.jpg');
        // qualquer valor pode ser salvo como metadados específicos do arquivo
        $p['imagens/uau.jpg']->setMetadata(array('mime-type' => 'image/jpeg'));
        $p['index.php'] = file_get_contents('index.php');
        $p->setMetadata(array('bootstrap' => 'index.php'));

        // salva o arquivo phar no disco
        $p->stopBuffering();
    }
} catch (Exception $e) {
    echo 'Não foi possível abrir o Phar: ', $e;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Além disso, a verificação do conteúdo do arquivo phar pode ser feita usando qualquer um dos
  algoritmos de hash simétricos suportados (MD5, SHA1, SHA256 e SHA512 se ext/hash estiver habilitado)
  e usando assinatura assimétrica de chave pública/privada usando OpenSSL. Para
  aproveitar a assinatura OpenSSL, é necessário gerar um par de chaves pública/privada e
  usar a chave privada para definir a assinatura usando
  <function>Phar::setSignatureAlgorithm</function>. Adicionalmente, a chave pública
  extraída usando este código:
  <programlisting role="php">
   <![CDATA[
<?php
$public = openssl_get_publickey(file_get_contents('private.pem'));
$pkey = '';
openssl_pkey_export($public, $pkey);
?>
   ]]>
  </programlisting>
  deve ser salva adjacente ao arquivo phar que ela verifica. Se o arquivo phar
  for salvo como <literal>/caminho/para/meu.phar</literal>, a chave pública deve ser salva
  como <literal>/caminho/para/meu.phar.pubkey</literal>, ou o phar não conseguirá verificar
  a assinatura OpenSSL.
 </para>
 <para>
  A classe <classname>Phar</classname> também fornece 3 métodos estáticos, <function>Phar::webPhar</function>,
  <function>Phar::mungServer</function> e <function>Phar::interceptFileFuncs</function>, que são cruciais
  para empacotar aplicações PHP projetadas para uso em sistemas de arquivos comuns e para aplicações web.
  <function>Phar::webPhar</function> implementa um controlador de frente que roteia chamadas HTTP para o local correto
  dentro do arquivo phar. <function>Phar::mungServer</function> é usado para modificar os valores
  do array <varname>$_SERVER</varname> para enganar aplicações que processam esses valores.
  <function>Phar::interceptFileFuncs</function> instrui o Phar a interceptar chamadas para
  <function>fopen</function>, <function>file_get_contents</function>, <function>opendir</function> e
  todas as funções baseadas em estatísticas (<function>file_exists</function>, <function>is_readable</function> e assim por diante) e
  rotear todos os caminhos relativos para locais dentro do arquivo phar.
 </para>
 <para>
  Por exemplo, empacotar uma versão do popular aplicativo phpMyAdmin para uso como um arquivo phar requer
  apenas este script simples e então <literal>phpMyAdmin.phar.tar.php</literal> pode ser acessado como um arquivo normal
  a partir do servidor web após modificar o usuário/senha:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
    <![CDATA[
<?php
@unlink('phpMyAdmin.phar.tar.php');
copy('phpMyAdmin-2.11.3-english.tar.gz', 'phpMyAdmin.phar.tar.php');
$a = new Phar('phpMyAdmin.phar.tar.php');
$a->startBuffering();
$a["phpMyAdmin-2.11.3-english/config.inc.php"] = '<?php
/* Configuração de servidores */
$i = 0;

/* Servidor localhost (config:root) [1] */
$i++;
$cfg[\'Servers\'][$i][\'host\'] = \'localhost\';
$cfg[\'Servers\'][$i][\'extension\'] = \'mysqli\';
$cfg[\'Servers\'][$i][\'connect_type\'] = \'tcp\';
$cfg[\'Servers\'][$i][\'compress\'] = false;
$cfg[\'Servers\'][$i][\'auth_type\'] = \'config\';
$cfg[\'Servers\'][$i][\'user\'] = \'root\';
$cfg[\'Servers\'][$i][\'password\'] = \'\';


/* Fim da configuração dos servidores */
if (strpos(PHP_OS, \'WIN\') !== false) {
    $cfg[\'UploadDir\'] = getcwd();
} else {
    $cfg[\'UploadDir\'] = \'/tmp/pharphpmyadmin\';
    @mkdir(\'/tmp/pharphpmyadmin\');
    @chmod(\'/tmp/pharphpmyadmin\', 0777);
}';
$a->setStub('<?php
Phar::interceptFileFuncs();
Phar::webPhar("phpMyAdmin.phar", "phpMyAdmin-2.11.3-english/index.php");
echo "O phpMyAdmin foi projetado para ser executado a partir de um navegador da web\n";
exit -1;
__HALT_COMPILER();
');
$a->stopBuffering();
?>
    ]]>
   </programlisting>
  </informalexample>
 </para>
</section>
<section xml:id="phar.using.stream" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Usando Arquivos Phar: o empacotador de fluxo phar</title>
 <para>
  O empacotador de fluxo Phar suporta totalmente <function>fopen</function> para
  leitura e gravação (não anexação), <function>unlink</function>, <function>stat</function>,
  <function>fstat</function>, <function>fseek</function>, <function>rename</function>
  e operações de fluxo de diretório <function>opendir</function>, <function>rmdir</function>
  e <function>mkdir</function>.
 </para>
 <para>
  A compactação de arquivos individuais e os metadados por arquivo também podem ser manipulados
  em um arquivo Phar usando contextos de fluxo:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$context = stream_context_create(array('phar' =>
                                    array('compress' => Phar::GZ)),
                                    array('metadata' => array('user' => 'cellog')));
file_put_contents('phar://meu.phar/algumarquivo.php', 0, $context);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  O empacotador de fluxo <literal>phar</literal> não opera em arquivos remotos,
  e não pode operar em arquivos remotos, sendo, portanto, permitido mesmo quando as opções INI
  <link linkend="ini.allow-url-fopen">allow_url_fopen</link> e
  <link linkend="ini.allow-url-include">allow_url_include</link>
  estão desabilitadas.
 </para>
 <para>
  Embora seja possível criar arquivos PHAR do zero usando apenas
  operações de fluxo, é melhor usar a funcionalidade incorporada
  à classe Phar. O empacotador de fluxo é mais adequado para operações somente leitura.
 </para>
</section>
<section xml:id="phar.using.object" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Usando Arquivos Phar: as classes Phar e PharData</title>
 <para>
  A classe <classname>Phar</classname> suporta leitura e manipulação
  de arquivos Phar, bem como iteração por meio da funcionalidade herdada
  da classe <classname>RecursiveDirectoryIterator</classname>.
  Com suporte à interface <classname>ArrayAccess</classname>,
  os arquivos dentro de um arquivo Phar podem ser acessados ​​como se fossem
  parte de um array associativo.
 </para>
 <para>
  A classe <classname>PharData</classname> estende a classe <classname>Phar</classname> e
  permite criar e modificar arquivos tar e zip não executáveis ​​(de dados), mesmo que
  <literal>phar.readonly</literal>=1 em php.ini. Dessa forma,
  <function>PharData::setAlias</function> e <function>PharData::setStub</function>
  estão desabilitados, pois os conceitos de alias e stub são exclusivos dos arquivos phar
  executáveis.
 </para>
 <para>
  É importante observar que, ao criar um arquivo Phar, o caminho completo
  deve ser passado para o construtor do objeto <classname>Phar</classname>.
  Caminhos relativos não serão inicializados.
 </para>
 <para>
  Supondo que <literal>$p</literal> é um objeto Phar inicializado da seguinte maneira:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$p = new Phar('/caminho/para/meuphar.phar', 0, 'meuphar.phar');
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Um arquivo Phar vazio será criado em <literal>/caminho/para/meuphar.phar</literal>,
  ou, se <literal>/caminho/para/meuphar.phar</literal> já existir, ele será aberto
  novamente. O literal <literal>meuphar.phar</literal> demonstra o conceito de um apelido
  que pode ser usado para referenciar <literal>/caminho/para/meuphar.phar</literal> em URLs como em:
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// essas duas chamadas para file_get_contents() são equivalentes se
// /caminho/para/meuphar.phar tiver um apelido explícito de "meuphar.phar"
// em seu manifesto, ou se o phar foi inicializado com a
// configuração do objeto Phar do exemplo anterior
$f = file_get_contents('phar:///caminho/para/meuphar.phar/qualquercoisa.txt');
$f = file_get_contents('phar://meuphar.phar/qualquercoisa.txt');
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Com o objeto <literal>$p</literal> <classname>Phar</classname> recém-criado,
  o seguinte é possível:
  <itemizedlist>
   <listitem>
    <simpara>
     <literal>$a = $p['arquivo.php']</literal> cria uma classe <classname>PharFileInfo</classname>
     que se refere ao conteúdo de <literal>phar://meuphar.phar/arquivo.php</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>$p['arquivo.php'] = $v</literal> cria um novo arquivo
     (<literal>phar://meuphar.phar/arquivo.php</literal>) ou sobrescreve
     um arquivo existente dentro de <literal>meuphar.phar</literal>. <literal>$v</literal>
     pode ser uma string ou um ponteiro para arquivo aberto, caso em que todo o
     conteúdo do arquivo será usado para criar o novo arquivo. Observe que
     <literal>$p-&gt;addFromString('arquivo.php', $v)</literal> é funcionalmente
     equivalente ao acima. Também é possível adicionar o conteúdo de um arquivo
     com <literal>$p-&gt;addFile('/caminho/para/arquivo.php', 'arquivo.php')</literal>.
     Por fim, um diretório vazio pode ser criado com
     <literal>$p-&gt;addEmptyDir('empty')</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>isset($p['arquivo.php'])</literal> pode ser usado para determinar
     se <literal>phar://meuphar.phar/arquivo.php</literal> existe dentro de
     <literal>meuphar.phar</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>unset($p['arquivo.php'])</literal> apaga
     <literal>phar://meuphar.phar/arquivo.php</literal> de
     <literal>meuphar.phar</literal>.
    </simpara>
   </listitem>
  </itemizedlist>
 </para>
 <para>
  Além disso, o objeto <classname>Phar</classname> é a única maneira de acessar
  metadados específicos do Phar, por meio de
  <function>Phar::getMetadata</function>,
  e a única maneira de definir ou recuperar o stub do carregador PHP de um arquivo Phar por meio de
  <function>Phar::getStub</function> e
  <function>Phar::setStub</function>.
  Além disso, a compactação de todo o arquivo Phar de uma só vez só pode ser manipulada
  usando a classe <classname>Phar</classname>.
 </para>
 <para>
  A lista completa de funcionalidades do objeto <classname>Phar</classname> está documentada
  abaixo.
 </para>
 <para>
  A classe <classname>PharFileInfo</classname> estende a classe
  <classname>SplFileInfo</classname>
  e adiciona vários métodos para manipular detalhes específicos de Phar de um arquivo
  contido em um Phar, como manipular compactação e metadados.
 </para>
</section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
