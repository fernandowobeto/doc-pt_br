<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 562a216c8108885a492cbfb66e2d5734847fa19d Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<book xml:id="book.phar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="bundled" ?>
 <title>Phar</title>

 <!-- {{{ preface -->
 <preface xml:id="intro.phar">
  &reftitle.intro;
  <para>
   A extensão phar fornece uma maneira de colocar aplicações PHP inteiras em um único arquivo
   chamado "phar" (Arquivo PHP) para fácil distribuição e instalação.
   Além de fornecer este serviço, a extensão phar também fornece um método de abstração
   de formato de arquivo para criar e manipular arquivos tar e zip através da classe
   <classname>PharData</classname>, assim como
   o PDO fornece uma interface unificada para acessar diferentes bancos de dados. Ao contrário do PDO,
   que não pode converter entre bancos de dados diferentes, o Phar também pode converter entre os formatos de arquivo tar,
   zip e phar com uma única linha de código. Veja
   <function>Phar::convertToExecutable</function> para um exemplo.
  </para>
  <para>
   O que é phar? Arquivos phar são melhor caracterizados como uma maneira conveniente de agrupar
   vários arquivos em um único arquivo. Assim, um arquivo phar fornece uma maneira de
   distribuir uma aplicação PHP completa em um único arquivo e executá-la a partir desse arquivo
   sem a necessidade de extraí-la para o disco. Além disso, arquivos phar podem ser
   executados pelo PHP tão facilmente quanto qualquer outro arquivo, tanto na linha de comando quanto em
   um servidor web. Phar é como um pen drive para aplicações PHP.
  </para>
  <para>
   Phar implementa essa funcionalidade por meio de um <link linkend="book.stream">empacotador
   de fluxo</link>. Normalmente, para usar um arquivo externo dentro de um script PHP, seria
   usado <function>include</function>:
  </para>
  <para>
   <example>
    <title>Using an external file</title>
    <programlisting role="php">
     <![CDATA[
 <?php
 include '/caminho/para/arquivo/externo.php';
 ?>
     ]]>
    </programlisting>
   </example>
  </para>
  <para>
   Pode-se pensar que o PHP está, na verdade, traduzindo
   <literal>/caminho/para/arquivo/externo.php</literal> em um
   empacotador de fluxo como <literal>arquivo:///caminho/para/arquivo/externo.php</literal> e,
   nos bastidores, ele de fato usa as funções do empacotador de fluxo de arquivo simples para
   acessar todos os arquivos locais.
  </para>
  <para>
   Para usar um arquivo chamado <literal>arquivo.php</literal> contido em um arquivo phar
   <literal>/caminho/para/meuphar.phar</literal>,
   a sintaxe é muito semelhante à sintaxe <literal>file://</literal> acima.
  </para>
  <para>
   <example>
    <title>Usando um arquivo dentro de um arquivo phar</title>
    <programlisting role="php">
<![CDATA[
 <?php
 include 'phar:///caminho/para/meuphar.phar/arquivo.php';
 ?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   De fato, é possível tratar um arquivo phar exatamente como se fosse um disco externo, usando
   qualquer uma das funções relacionadas a <function>fopen</function>, <function>opendir</function> e
   funções relacionadas a <function>mkdir</function> para ler, alterar ou criar novos arquivos
   e diretórios dentro do arquivo phar. Isso permite que aplicações PHP completas
   sejam distribuídas em um único arquivo e executadas diretamente a partir dele.
  </para>
  <para>
   O uso mais comum de um arquivo phar é distribuir uma aplicação completa
   em um único arquivo. Por exemplo, o Instalador PEAR, que acompanha as versões do PHP
   é distribuído como um arquivo phar. Para usar um arquivo phar distribuído
   desta forma, o arquivo pode ser executado na linha de comando ou por meio de um servidor web.
  </para>
  <para>
   Os arquivos Phar podem ser distribuídos como arquivos <literal>tar</literal>,
   arquivos <literal>zip</literal> ou como o formato de arquivo <literal>phar</literal> personalizado
   projetado especificamente para a extensão phar. Cada formato de arquivo tem vantagens
   e desvantagens. Os formatos de arquivo tar e zip podem ser lidos ou extraídos por qualquer
   ferramenta de terceiros que possa ler o formato, mas que requer a extensão phar para
   executar com PHP. O formato de arquivo phar é personalizado e exclusivo para a extensão phar,
   e só pode ser criado pela extensão phar ou pelo pacote PEAR
   <link xlink:href="&url.pear.package;PHP_Archive">PHP_Archive</link>, mas tem a
   vantagem de que as aplicações criadas neste formato serão executadas mesmo se a extensão phar
   não estiver habilitada.
  </para>
  <para>
   Em outras palavras, mesmo com a extensão phar desabilitada, é possível executar ou incluir
   um arquivo baseado em phar. Acessar arquivos individuais dentro de um arquivo phar só é
   possível com a extensão phar, a menos que o arquivo phar tenha sido criado pelo PHP_Archive.
  </para>
  <para>
   A extensão phar também é capaz de converter um arquivo phar de tar para zip ou
   para o formato de arquivo phar em um único comando:
  </para>
  <para>
   <example>
    <title>Convertendo um arquivo phar do formato phar para tar</title>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new Phar('meuphar.phar');
$pgz = $phar->convertToExecutable(Phar::TAR, Phar::GZ); // cria meuphar.phar.tar.gz
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   O Phar pode compactar arquivos individuais ou um arquivo inteiro
   usando a compactação <link linkend="book.zlib">gzip</link> ou
   <link linkend="book.bzip2">bzip2</link>, e pode verificar a integridade
   do arquivo automaticamente por meio do uso de assinaturas MD5, SHA-1, SHA-256
   ou SHA-512.
  </para>
  <para>
   Por fim, a extensão Phar é voltada para a segurança e desabilita o acesso de gravação
   aos arquivos Phar executáveis ​​por padrão, além de exigir a desativação, em nível de sistema, da configuração
   <literal>phar.readonly</literal> do php.ini para criar ou
   modificar arquivos Phar. Arquivos tar e zip normais sem um stub executável
   sempre podem ser criados ou modificados usando a classe <classname>PharData</classname>.
  </para>
  <para>
   Se aplicações para distribuição estiverem sendo criadas, leia
   <link linkend="phar.creating">Como criar arquivos Phar</link>. Se quiser
   mais informações sobre as diferenças entre os três formatos de arquivo suportados pelo Phar,
   leia <link linkend="phar.fileformat">Phar, Tar e Zip</link>.
  </para>
  <para>
   Se aplicações Phar estiverem sendo usadas, há dicas úteis em
   <link linkend="phar.using">Como usar os Arquivos Phar</link>.
  </para>
  <para>
   A palavra <literal>phar</literal> é uma junção de <literal>PHP</literal> e
   <literal>Archive</literal> e é vagamente baseada
   no <literal>jar</literal> (Java Archive), familiar aos desenvolvedores Java.
  </para>
  <para>
   A implementação para arquivos Phar é baseada no pacote PEAR
   <link xlink:href="&url.pear.package;PHP_Archive">PHP_Archive</link>, e
   os detalhes de implementação são semelhantes, embora a extensão Phar
   seja muito mais poderosa. Além disso, a extensão Phar permite que a maioria das aplicações PHP
   sejam executadas sem modificações, enquanto os arquivos Phar baseados em PHP_Archive
   geralmente exigem modificações extensas para funcionar.
  </para>
 </preface>
 <!-- }}} -->

 &reference.phar.setup;
 &reference.phar.constants;
 &reference.phar.using;
 &reference.phar.creating;
 &reference.phar.fileformat;
 &reference.phar.Phar;
 &reference.phar.PharData;
 &reference.phar.PharFileInfo;
 &reference.phar.PharException;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

