<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 756e0dd85815e12bc06b3b087b8f5319482bc088 Maintainer: leonardolara Status: ready -->
<refentry xml:id="memcache.addserver" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::addServer</refname>
  <refpurpose>Adiciona um servidor memcached ao pool de conexão</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::addServer</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>11211</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>failure_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeoutms</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::addServer</function> adiciona um servidor ao pool de conexão.
   Pode-se também usar a função <function>memcache_add_server</function>.
  </para>

  <para>
   Ao usar este método (ao contrário de <function>Memcache::connect</function> e
   <function>Memcache::pconnect</function>) a conexão de rede não é estabelecida
   até que seja realmente necessária. Portanto, não há sobrecarga na adição de um grande número de servidores
   ao pool, mesmo que eles não sejam todos usados.
  </para>

  <para>
   O failover pode ocorrer em qualquer estágio em qualquer um dos métodos, desde que outros
   servidores estejam disponíveis, a solicitação não será notada pelo usuário. Qualquer tipo de
   erro de nível de soquete ou servidor Memcached (exceto falta de memória) pode disparar
   o failover. Erros normais do cliente, como adicionar uma chave existente, não
   dispararão um failover.
  </para>

  <note>
   <para>
    Esta função foi adicionada ao Memcache versão 2.0.0.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Aponta para o host onde o memcached está escutando conexões. Este parâmetro
       também pode especificar outros transportes como <literal>unix:///path/to/memcached.sock</literal>
       para usar soquetes de domínio UNIX, neste caso <parameter>port</parameter> também deve
       ser definido como <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Aponta para a porta onde o memcached está escutando conexões.
       Defina este
       parâmetro como <literal>0</literal> ao usar soquetes de domínio UNIX.
      </para>
      <para>
       Observe: <parameter>port</parameter> assume como padrão
       <link linkend="ini.memcache.default-port">memcache.default_port</link>
       se não for especificado. Por esse motivo, é sensato especificar a porta
       explicitamente nessa chamada de método.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent</parameter></term>
     <listitem>
      <para>
       Controla o uso de uma conexão persistente. Padrão é &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>weight</parameter></term>
     <listitem>
      <para>
       Número de buckets a serem criados para este servidor que, por sua vez, controlam sua
       probabilidade de ser selecionado. A probabilidade é relativa ao
       peso total de todos os servidores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valor em segundos que será usado para conectar ao daemon. Pense
      duas vezes antes de alterar o valor padrão de 1 segundo - podem ser perdidas todas
      as vantagens do cache se a conexão for muito lenta.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Controla a frequência com que um servidor com falha será tentado novamente, o valor padrão
       é 15 segundos. Definir este parâmetro como -1 desabilita a repetição automática.
       Nem este nem o parâmetro <parameter>persistent</parameter> têm qualquer
       efeito quando a extensão é carregada dinamicamente via <function>dl</function>.
      </para>
      <para>
       Cada estrutura de conexão com falha tem seu próprio tempo limite e antes que ela expire
       a estrutura será ignorada ao selecionar backends para atender a uma solicitação. Uma vez
       expirada, a conexão será reconectada com sucesso ou marcada como falhada
       por mais <parameter>retry_interval</parameter> segundos. O efeito
       típico é que cada filho do servidor web tentará novamente a conexão a cada
       <parameter>retry_interval</parameter> segundos ao atender uma página.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Controla se o servidor deve ser sinalizado como online. Definir este parâmetro
       como &false; e <parameter>retry_interval</parameter> como -1 permite que um
       servidor com falha seja mantido no pool para não afetar o algoritmo de distribuição de chaves.
       As solicitações para este servidor então farão failover ou falharão imediatamente
       dependendo da configuração <parameter>memcache.allow_failover</parameter>.
       Padrão é &true;, significando que o servidor deve ser considerado online.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permite que o usuário especifique uma função de retorno para ser executada ao encontrar um
       erro. A função de retorno é executada antes da tentativa de failover. A função leva
       dois parâmetros, o nome do host e a porta do servidor com falha.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeoutms</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

<refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>Memcache::addServer</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API orientada a objeto */

$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* API procedural */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Quando o <parameter>port</parameter> não é especificado, este método assume como padrão o
    conjunto de valores da diretiva INI
    <link linkend="ini.memcache.default-port">memcache.default_port</link> do PHP.
    Se este valor foi alterado em outro lugar na aplicação, isso pode levar a
    resultados inesperados: por este motivo, é sensato sempre especificar a porta
    explicitamente nesta chamada de método.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::connect</function></member>
    <member><function>Memcache::pconnect</function></member>
    <member><function>Memcache::close</function></member>
    <member><function>Memcache::setServerParams</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
