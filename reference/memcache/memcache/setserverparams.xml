<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b8758b0605e80c4e3610137b7502a6abeea5c69b Maintainer: leonardolara Status: ready -->
<refentry xml:id="memcache.setserverparams" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::setServerParams</refname>
  <refpurpose>Altera os parâmetros e o status do servidor em tempo de execução</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::setServerParams</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>11211</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>failure_callback</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::setServerParams</function> altera os parâmetros do servidor em tempo de execução.
   Também pode ser usada a função <function>memcache_set_server_params</function>.
  </para>

  <note>
   <para>
    Esta função foi adicionada ao Memcache versão 2.1.0.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Aponta para o host onde o memcached está escutando conexões.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Aponta para a porta onde o memcached está escutando conexões.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valor em segundos que será usado para conectar ao daemon. Cuidado
       ao alterar o valor padrão de 1 segundo - podem ser perdidas todas
       as vantagens do cache se a conexão for muito lenta.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Controla a frequência com que um servidor com falha será tentado novamente, o valor padrão
       é 15 segundos. Definir este parâmetro como -1 desabilita a repetição automática.
       Nem este nem o parâmetro <parameter>persistent</parameter> têm qualquer
       efeito quando a extensão é carregada dinamicamente via <function>dl</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Controla se o servidor deve ser sinalizado como online. Definir este parâmetro
       como &false; e <parameter>retry_interval</parameter> como -1 permite que um
       servidor com falha seja mantido no pool para não afetar o algoritmo de distribuição de chaves.
       As solicitações para este servidor então farão failover ou falharão imediatamente
       dependendo da configuração <parameter>memcache.allow_failover</parameter>.
       Padrão é &true;, que significa servidor online.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permite que o usuário especifique uma função de retorno para ser executada ao encontrar um
       erro. A função de retorno é executada antes da tentativa de failover. A função leva
       dois parâmetros, o nome do host e a porta do servidor com falha.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>Memcache::setServerParams</function></title>
    <programlisting role="php">
<![CDATA[
<?php

function _callback_memcache_failure($host, $port) {
    print "memcache '$host:$port' falhou";
}

/* API orientada a objeto */

$memcache = new Memcache;

// Adiciona o servidor no modo offline
$memcache->addServer('memcache_host', 11211, false, 1, 1, -1, false);

// Traz o servidor de volta online
$memcache->setServerParams('memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

/* API procedural */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_set_server_params($memcache_obj, 'memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::addServer</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
