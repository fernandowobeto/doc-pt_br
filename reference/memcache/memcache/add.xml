<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 81cff4de7472c88fd3fe7204ed04d0a4d7860aec Maintainer: leonardolara Status: ready -->
<refentry xml:id="memcache.add" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::add</refname>
  <refpurpose>Adiciona um item ao servidor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::add</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::add</function> armazena a variável
   <parameter>var</parameter> com a chave <parameter>key</parameter> somente se tal
   chave ainda não existir no servidor.
   Pode-se também usar a função <function>memcache_add</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       A chave que será associada ao item.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       A variável a ser armazenada. Strings e inteiros são armazenados como estão, outros
       tipos são armazenados serializados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Use <constant>MEMCACHE_COMPRESSED</constant> para armazenar o item
       compactado (usa zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Tempo de expiração do item. Se for igual a zero, o item nunca
       irá expirar. Pode-se também usar o timestamp Unix ou um número de segundos começando
       no horário atual, mas no último caso o número de segundos não pode
       exceder 2592000 (30 dias).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
   Retorna &false; se tal chave já existir. Para o resto
   <function>Memcache::add</function> se comporta similarmente a
   <function>Memcache::set</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>Memcache::add</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$memcache_obj = memcache_connect("localhost", 11211);

/* API procedural */
memcache_add($memcache_obj, 'chave_var', 'variável de teste', false, 30);

/* API orientada a objeto */
$memcache_obj->add('chave_var', 'variável de teste', false, 30);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::set</function></member>
    <member><function>Memcache::replace</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
