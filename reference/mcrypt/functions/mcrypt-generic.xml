<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 115560f445336d95d9fccdc1b8b2a90e210fbbd0 Maintainer: leonardolara Status: ready -->
<refentry xml:id="function.mcrypt-generic" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mcrypt_generic</refname>
  <refpurpose>Esta função criptografa dados</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  &warn.deprecated.function-7-1-0.removed-7-2-0;
 </refsynopsisdiv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mcrypt_generic</methodname>
   <methodparam><type>resource</type><parameter>td</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta função criptografa dados. Os dados são preenchidos com "<literal>\0</literal>"
   para garantir que o comprimento dos dados seja n * tamanho_do_bloco. Esta
   função retorna os dados criptografados. Observe que o comprimento
   da string retornada pode, de fato, ser maior que a entrada,
   devido ao preenchimento dos dados.
  </para>
  <para>
   Se houver necessidade de armazenar os dados criptografados em um banco de dados, certifique-se de armazenar
   a string inteira conforme retornada por mcrypt_generic, ou a string não
   será totalmente descriptografada corretamente. Se a string original tiver 10 caracteres
   e o tamanho do bloco for 8 (use
   <function>mcrypt_enc_get_block_size</function> para determinar o
   tamanho do bloco), seriam necessários pelo menos 16 caracteres no campo do banco de dados.
   Observe que a string retornada por <function>mdecrypt_generic</function> terá
   16 caracteres também... use rtrim($str, "\0") para remover o preenchimento.
  </para>
  <para>
   Se os dados forem, por exemplo, armazenados em um banco de dados MySQL, lembre-se de que
   campos "varchar" automaticamente têm espaços finais removidos durante a
   inserção. Como dados criptografados podem terminar em um espaço (ASCII 32), os dados serão
   corrompidos por essa remoção. Em vez disso, armazene os dados em um campo tinyblob/tinytext (ou
   maior).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>td</parameter></term>
     <listitem>
      <para>
       O descritor de criptografia.
      </para>
      <para>
       O identificador de criptografia deve sempre ser inicializado com
       <function>mcrypt_generic_init</function> com uma chave e um IV antes
       de chamar esta função. Onde a criptografia é feita, devem ser liberados os
       buffers de criptografia chamando <function>mcrypt_generic_deinit</function>.
       Veja <function>mcrypt_module_open</function> para um exemplo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Os dados a serem criptografados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna os dados criptografados.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mdecrypt_generic</function></member>
    <member><function>mcrypt_generic_init</function></member>
    <member><function>mcrypt_generic_deinit</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
