<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a5eca06ae7725b4c35eefecbb0d722a3e198ff21 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->

<refentry xml:id="function.mongodb.bson-tojson" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\BSON\toJSON</refname>
  <refpurpose>Retorna a representação JSON Estendida Legada de um valor BSON</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <warning>
   <para>
    Esta função foi <emphasis>DESCONTINUADA</emphasis> a partir da versão
    1.20.0 da extensão, e será removida na 2.0. As aplicações devem usar
    <methodname>MongoDB\BSON\Document::toCanonicalExtendedJSON</methodname> ou
    <methodname>MongoDB\BSON\Document::toRelaxedExtendedJSON</methodname>
    em seu lugar.
   </para>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>MongoDB\BSON\toJSON</methodname>
   <methodparam><type>string</type><parameter>bson</parameter></methodparam>
  </methodsynopsis>
  <para>
   Converte uma string BSON na sua
   representação
   <link xlink:href="&url.mongodb.docs.extendedjson;">JSON Estendida Legada</link>
  </para>
  <note>
   <simpara>
    Existem vários formatos JSON para representar BSON. Esta função
    implementa o "modo estrito" definido em
    <link xlink:href="&url.mongodb.docs.extendedjson;">JSON Estendido MongoDB</link>,
    que foi substituído pelos formatos canônicos e relaxados definidos
    na
    <link xlink:href="&url.mongodb.specs.extendedjson;">Especificação JSON estendida</link>
    e implementada por <function>MongoDB\BSON\toCanonicalExtendedJSON</function>
    e <function>MongoDB\BSON\toRelaxedExtendedJSON</function>, respectivamente.
   </simpara>
  </note>
  <warning>
   <simpara>
    <link xlink:href="&url.json;">JSON</link> não suporta
    <link linkend="language.types.float.nan"><constant>NAN</constant></link> e
    <link linkend="function.is-infinite"><constant>INF</constant></link> e
    o formato JSON Estendido Legado do MongoDB não define uma representação
    alternativa para estes valores
    (<link xlink:href="&url.mongodb.libbson;">libbson</link> irá produzir
    literais <literal>nan</literal> e <literal>inf</literal>, que podem não ser
    interpretados como JSON válido). Ao trabalhar com BSON que possa conter
    números não finitos, devem ser usados os métodos
    <function>MongoDB\BSON\toCanonicalExtendedJSON</function> ou
    <function>MongoDB\BSON\toRelaxedExtendedJSON</function>.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>bson</parameter> (<type>string</type>)</term>
    <listitem>
     <para>
      Valor BSON a ser convertido.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   O valor JSON convertido.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.bson.unexpected;
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemplo de <function>MongoDB\BSON\toJSON</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$documents = [
    [ 'null' => null ],
    [ 'boolean' => true ],
    [ 'string' => 'foo' ],
    [ 'int32' => 123 ],
    [ 'int64' => 4294967295 ],
    [ 'double' => 1.0, ],
    [ 'nan' => NAN ],
    [ 'pos_inf' => INF ],
    [ 'neg_inf' => -INF ],
    [ 'array' => [ 'foo', 'bar' ]],
    [ 'document' => [ 'foo' => 'bar' ]],
    [ 'oid' => new MongoDB\BSON\ObjectId('56315a7c6118fd1b920270b1') ],
    [ 'dec128' => new MongoDB\BSON\Decimal128('1234.5678') ],
    [ 'binary' => new MongoDB\BSON\Binary('foo', MongoDB\BSON\Binary::TYPE_GENERIC) ],
    [ 'date' => new MongoDB\BSON\UTCDateTime(1445990400000) ],
    [ 'timestamp' => new MongoDB\BSON\Timestamp(1234, 5678) ],
    [ 'regex' => new MongoDB\BSON\Regex('pattern', 'i') ],
    [ 'code' => new MongoDB\BSON\Javascript('function() { return 1; }') ],
    [ 'code_ws' => new MongoDB\BSON\Javascript('function() { return a; }', ['a' => 1]) ],
    [ 'minkey' => new MongoDB\BSON\MinKey ],
    [ 'maxkey' => new MongoDB\BSON\MaxKey ],
];

foreach ($documents as $document) {
    $bson = MongoDB\BSON\fromPHP($document);
    echo MongoDB\BSON\toJSON($bson), "\n";
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
{ "null" : null }
{ "boolean" : true }
{ "string" : "foo" }
{ "int32" : 123 }
{ "int64" : 4294967295 }
{ "double" : 1.0 }
{ "nan" : nan }
{ "pos_inf" : inf }
{ "neg_inf" : -inf }
{ "array" : [ "foo", "bar" ] }
{ "document" : { "foo" : "bar" } }
{ "oid" : { "$oid" : "56315a7c6118fd1b920270b1" } }
{ "dec128" : { "$numberDecimal" : "1234.5678" } }
{ "binary" : { "$binary" : "Zm9v", "$type" : "00" } }
{ "date" : { "$date" : 1445990400000 } }
{ "timestamp" : { "$timestamp" : { "t" : 5678, "i" : 1234 } } }
{ "regex" : { "$regex" : "pattern", "$options" : "i" } }
{ "code" : { "$code" : "function() { return 1; }" } }
{ "code_ws" : { "$code" : "function() { return a; }", "$scope" : { "a" : 1 } } }
{ "minkey" : { "$minKey" : 1 } }
{ "maxkey" : { "$maxKey" : 1 } }
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoDB\BSON\fromJSON</function></member>
   <member><function>MongoDB\BSON\toCanonicalExtendedJSON</function></member>
   <member><function>MongoDB\BSON\toRelaxedExtendedJSON</function></member>
   <member><link xlink:href="&url.mongodb.docs.extendedjson;">JSON Estendido do MongoDB</link></member>
   <member><link xlink:href="&url.mongodb.docs.bson;">BSON do MongoDB</link></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
