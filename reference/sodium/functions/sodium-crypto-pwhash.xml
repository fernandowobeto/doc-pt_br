<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d76a7fe17dd2488e47d664a8ab38e161b13ac843 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xml:id="function.sodium-crypto-pwhash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_pwhash</refname>
  <refpurpose>Deriva uma chave de uma senha, usando Argon2</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sodium_crypto_pwhash</methodname>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>opslimit</parameter></methodparam>
   <methodparam><type>int</type><parameter>memlimit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>algo</parameter><initializer><constant>SODIUM_CRYPTO_PWHASH_ALG_DEFAULT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta função fornece acesso de baixo nível à função de derivação de chaves crypto_pwhash do libsodium. A menos que haja um motivo específico para usar esta função, deve-se usar as funções <function>sodium_crypto_pwhash_str</function> ou <function>password_hash</function>.
  </para>
  <para>
   Um motivo comum para usar essa função específica é derivar as sementes para chaves criptográficas a partir de uma senha e um salt,
   e então usar essas sementes para gerar as chaves reais necessárias para algum propósito (por exemplo, <function>sodium_crypto_sign_detached</function>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>length</parameter></term>
    <listitem>
     <para>
      <type>int</type>; O comprimento do hash da senha a ser gerado, em bytes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      <type>string</type>; A senha para a qual será gerado um hash.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>salt</parameter></term>
    <listitem>
     <para>
      Um salt para adicionar à senha antes do hash. O sal deve ser imprevisível, idealmente gerado a partir de uma boa fonte de números aleatórios, como <function>random_bytes</function>, e ter um comprimento de exatamente <constant>SODIUM_CRYPTO_PWHASH_SALTBYTES</constant> bytes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opslimit</parameter></term>
    <listitem>
     <para>
      Representa uma quantidade máxima de cálculos a serem realizados. Aumentar esse número fará com que a função exija mais ciclos de CPU para calcular uma chave. Existem algumas constantes disponíveis para definir o limite de operações para valores apropriados, dependendo do uso pretendido, em ordem de intensidade: <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE</constant>, <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE</constant> e <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE</constant>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memlimit</parameter></term>
    <listitem>
     <para>
      A quantidade máxima de RAM que a função utilizará, em bytes. Existem constantes para ajudar você a escolher um valor apropriado, em ordem de tamanho: <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE</constant>, <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE</constant> e <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE</constant>. Normalmente, elas devem ser pareadas com os valores <parameter>opslimit</parameter> correspondentes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      <type>int</type> Um número que indica o algoritmo de hash a ser usado. Por padrão, <constant>SODIUM_CRYPTO_PWHASH_ALG_DEFAULT</constant> (o algoritmo atualmente recomendado, que pode mudar de uma versão do libsodium para outra), ou explicitamente usando <constant>SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13</constant>, representando o algoritmo Argon2id versão 1.3.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a chave derivada. O valor de retorno é uma string binária do hash, não uma representação codificada em ASCII, e não contém informações adicionais sobre os parâmetros usados ​​para criar o hash. Portanto, você precisará manter essas informações se for verificar a senha no futuro. Use <function>sodium_crypto_pwhash_str</function> para evitar a necessidade de fazer tudo isso.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de <function>sodium_crypto_pwhash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Precisamos manter o salt se quisermos verificar essa senha
$salt = random_bytes(SODIUM_CRYPTO_PWHASH_SALTBYTES);
// Usando bin2hex para manter a saída legível
echo bin2hex(
    sodium_crypto_pwhash(
        16, // == 128 bits
        'password',
        $salt,
        SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
        SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE,
        SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13
    )
);
?>]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
a18f346ba57992eb7e4ae6abf3fd30ee
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
